.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.7803,  7.9727,  6.0890,  4.2827, 13.9015],
            [ 7.7434,  2.8869,  8.4429,  8.5558,  1.5150],
            [13.6584,  4.2185,  7.7194,  6.8194, 10.2000],
            [ 4.9049,  8.3673, 11.5913, 19.9192,  6.5912],
            [ 2.5104,  2.6897,  8.7048,  7.0615,  3.9199],
            [ 4.9049,  3.0530,  0.7289,  8.4103,  6.5912],
            [13.6584,  3.2463,  6.8856,  4.7725, 10.2000],
            [ 7.7434, 11.4703, 10.7559,  5.5001,  1.5150]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.1687,  0.7803, -1.2493,  0.5173,  1.7445,  1.1264, -0.3124, -2.2643],
            [ 0.1020, -1.1953, -0.8320, -0.6899, -0.1028, -0.1964, -0.1414,  0.2601],
            [-1.5378,  1.2792, -1.0331, -1.1645, -1.0554,  0.7665,  0.0270,  0.1270],
            [ 1.8314, -0.8319,  0.2269,  1.5991, -1.5401,  2.1306, -1.1391,  0.1730],
            [ 0.0903,  0.6774,  2.1356, -0.6373,  0.6999,  0.7538,  0.7916,  1.0496],
            [-1.2852,  0.2407,  0.1557,  1.3851, -0.3158,  0.3155,  0.1708, -0.1951],
            [-1.1502, -0.5393,  0.5641,  1.1329, -1.5342, -0.0593,  0.2228,  0.0172],
            [-1.6621,  0.3068,  0.6909,  0.2211,  1.3525,  1.4707,  0.3556,  1.7839]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3668,  0.6476,  0.7762],
            [-0.6020,  1.7530,  0.2070],
            [-0.2270,  1.7479,  1.0392]], requires_grad=True), Parameter containing:
    tensor([[-0.2968]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.9356, -3.6062,  4.0523, -1.7822, -0.3531, -3.5014, -1.0955,  0.1798],
            [-9.2409, -0.9187, -0.4576, -4.5080,  0.5424, -1.4316, -3.6036, -2.1199],
            [-5.6943,  3.5776, -2.0534, -3.0336, -6.0745, -1.1253, -3.1994,  1.2323],
            [-4.6165,  2.1600, -0.6115,  2.3327, -2.9500, -1.2801, -6.2904, -3.6623],
            [-2.7474, -1.2152,  3.9672,  1.8190, -0.3471, -2.8382, -4.2706, -0.1664],
            [ 0.1383,  3.2976,  4.3390, -1.3830,  0.5538, -2.8700, -5.4811,  0.0775],
            [-3.0280,  4.5157,  1.4746, -3.1897, -0.4932,  0.3290,  0.7044, -0.1068],
            [ 4.8612,  7.8784,  0.9911, -3.8970,  1.1463, -3.1749, -1.4437,  3.2419]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1614, -0.3121, -0.4402,  0.1830, -0.1454,  1.2207,  2.0339,  0.2529,
              0.1500,  0.3936],
            [-0.0326, -0.4420,  0.5712,  0.3659,  0.9087,  4.2996,  2.1861,  0.1490,
              2.4137,  1.0749],
            [-0.1354,  0.2430, -0.8559, -0.1722,  3.7706,  3.4474,  3.9585,  1.5933,
              3.3184,  1.0789],
            [ 0.6501, -0.6535, -0.1575,  2.3602,  2.6632,  0.6090,  1.5175,  2.0364,
              3.6140,  0.9686],
            [ 0.2003, -3.3244,  2.3469,  2.2623, -2.2269, -2.7067, -0.4562,  0.6930,
             -0.8799,  0.0941],
            [-0.7003,  0.1619,  3.2396,  1.6663, -1.9322, -3.2001, -4.4662, -1.8892,
             -0.3780, -0.7076],
            [-0.6554,  3.5256,  3.6314,  1.5748,  1.6366, -6.1088, -5.6121,  2.0170,
             -0.0935,  0.0273],
            [-0.3945,  0.9593, -1.4144, -2.5922,  2.9857, -5.3519, -7.9165,  2.7546,
              1.6519, -0.6217],
            [ 0.1179,  0.7509,  2.4228,  0.4448,  1.6704, -3.5020,  2.1455,  2.6458,
              0.4226,  0.2675],
            [ 0.1416, -1.0682, -0.8266, -0.1048,  0.9443, -2.9077,  0.2269,  1.3404,
             -1.2557, -0.7454]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.212 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
