.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.6969,  5.5260,  4.3012,  5.4226,  1.5631],
            [ 5.8620, 10.5818,  7.0477,  2.4913,  5.0019],
            [ 5.3599,  4.5125,  9.0877,  8.0384,  1.1946],
            [12.8301,  7.3578, 11.6275,  4.4722,  3.7810],
            [ 0.3141, 15.6021, 10.0721,  1.3798,  6.0381],
            [12.8301,  3.1868,  1.4603, 13.1922,  3.7810],
            [ 5.3599,  3.8547,  4.5099,  0.2152,  1.1946],
            [ 5.8620, 13.1436,  1.3354,  4.0786,  5.0019]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.9243,  0.2408, -0.6064,  0.1652, -0.8133, -0.7367,  0.5183, -1.6697],
            [ 1.0005,  1.7822,  0.4520, -1.7868, -1.0950, -0.2248,  0.7747,  0.7716],
            [ 0.7060,  1.0101, -1.0821, -0.6432, -0.2851,  0.2623, -1.3215, -0.2836],
            [-0.1177,  0.0455, -1.2050,  0.3420, -0.0474, -1.8667,  0.6701,  0.5653],
            [ 0.3534,  1.4007,  0.9304,  0.5938,  0.4178,  2.1467, -0.3386, -0.1115],
            [ 0.3675, -1.7073, -1.1632, -0.5247, -0.1282,  0.6946,  0.3491,  0.3537],
            [-2.0122,  0.1470,  0.2896, -0.0098,  0.9962, -0.4727,  0.2687, -1.1420],
            [ 0.4577, -1.6211, -1.1282,  0.0928,  0.2458,  0.4717,  0.8405,  0.6476]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1909, -1.3941, -0.9023],
            [-0.3060, -1.3129,  1.6109],
            [ 0.5799,  0.8411, -0.0868]], requires_grad=True), Parameter containing:
    tensor([[1.1016]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.9950,  2.5357, -1.1303, -1.9000,  0.5918,  7.0473, -1.7863,  3.0860],
            [ 7.1128,  4.9217,  0.4228,  3.4490, -2.8405,  1.9686,  3.2823, -0.0698],
            [ 2.1095,  0.7671,  1.4054, -3.6110,  0.8676,  3.3165, -1.8164, -2.5868],
            [ 1.5983,  0.1846, -0.5047,  2.7982,  2.0302, -4.7629,  8.8171,  1.0508],
            [ 0.5674, -1.0375,  2.2186,  6.8502,  1.1774,  1.9132,  2.4644, -1.5760],
            [ 1.1215, -0.0308,  4.3515, -1.0473, -1.6226,  0.0997,  1.2354, -1.2209],
            [-4.9635,  1.4423,  2.9799,  0.5392,  3.6770, -4.1750,  0.9376,  5.4294],
            [ 2.9651,  7.1851,  1.1669, -2.6478,  0.4662,  2.6732,  5.1925, -1.6412]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3455, -0.9212, -1.3909,  4.1255, -0.2571,  0.2423, -3.7342, -0.2142,
              0.6570, -0.0832],
            [-1.6903,  0.0576,  3.2971,  4.0639, -4.6160,  1.2717, -1.3334,  3.6182,
             -0.3687,  0.7120],
            [ 0.5897,  3.9597, -1.9547, -5.0234, -0.5127,  3.6145, -4.3919,  2.5316,
              1.5183, -1.6385],
            [-0.5551, -3.2465, -2.3441, -1.6104,  0.2481,  3.8295,  0.5237,  5.2302,
             -7.0866, -0.2951],
            [ 0.7160, -1.0727,  3.6099, -0.3864,  3.3321,  0.5787, -5.1930,  2.8383,
             -2.8133,  1.6246],
            [-1.0031, -0.4545,  2.5766, -0.0062, -1.4431, -0.5994,  4.5296, -4.9951,
              1.1843,  3.2221],
            [ 0.8619, -0.4589, -0.7679,  2.9443,  2.5954, -2.4127, -3.2000,  1.5593,
              6.8553, -2.6409],
            [ 0.3457, -2.7657,  2.8432, -2.0859, -0.6790, -6.0085,  3.8714,  2.4574,
             -0.8882, -0.0011],
            [-0.0975, -1.2605, -0.0784, -3.7888,  1.7684, -1.3378,  3.6285, -2.8101,
             -0.9273, -1.2175],
            [ 0.4171,  0.2026, -0.0550,  0.7203,  0.4172,  0.0591, -2.3200, -1.1259,
             -0.5738,  0.0682]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.211 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
