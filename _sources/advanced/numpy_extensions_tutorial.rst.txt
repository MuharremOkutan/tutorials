.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.1522,  7.5822, 12.8079,  8.1539,  3.1643],
            [ 6.2066,  4.6373,  8.7692,  2.9187, 11.2971],
            [10.8658,  7.8309, 10.9504,  3.0506, 10.6048],
            [ 2.8488,  3.0833,  6.0962, 13.9840,  7.3977],
            [ 9.6069,  6.9659, 10.7823,  7.3065, 10.3877],
            [ 2.8488, 11.9072,  4.4141, 18.0883,  7.3977],
            [10.8658,  7.6704,  6.2105,  3.6109, 10.6048],
            [ 6.2066,  6.6005,  3.6166, 11.3879, 11.2971]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.3078,  1.1420,  1.0742, -0.0699, -1.4495, -1.6235, -0.0876,  1.0833],
            [-2.2804, -0.9338,  0.3761,  0.3769, -1.4995,  0.1098, -0.7858, -0.4986],
            [ 0.1755,  1.8198, -0.1051, -1.3142,  1.2470, -1.3625,  0.5170,  1.2147],
            [ 1.3282, -1.1772,  2.3701,  0.0908, -0.7250, -0.9978,  0.1546, -1.9122],
            [-0.5667, -0.0760, -0.9204,  0.3627, -0.5868,  0.0847,  0.5060,  0.0507],
            [-1.2136, -0.2620, -0.6025,  0.9554,  0.2399, -0.7094,  0.8932, -0.4922],
            [ 0.9428,  1.0350,  0.2117,  0.9469, -0.1335,  1.9592, -1.0412, -0.0012],
            [-0.5273,  0.7943, -0.4559,  1.3257, -0.5166, -2.7547,  2.1106,  1.3393]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2511,  0.3160, -0.0431],
            [ 1.6240,  0.9041, -2.2976],
            [ 2.7359, -0.6506, -1.2533]], requires_grad=True), Parameter containing:
    tensor([[1.6878]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2943,  3.7766, -0.5515, 14.5024,  2.4844,  1.7572, -4.3197, -5.1466],
            [-1.0967,  4.4706, 10.3021, -4.2653,  5.6801,  1.7615, -4.0089, -0.9420],
            [ 1.4926, 16.7133, -4.2723, -0.2485,  6.9508,  2.2305, -6.0561, -1.7780],
            [14.0003,  4.7196, -5.1466,  0.5859,  9.4835, -5.9771,  1.2251,  3.4303],
            [ 8.4654,  4.8473, -6.0021,  0.7348,  3.3636, -3.4964, -1.2442,  3.5455],
            [ 2.4070,  1.2618, -1.3747, -1.5620,  2.0306, -0.8947, -4.6541,  9.7421],
            [-7.0045,  4.8708,  4.4824, -8.5251,  5.0320, -4.2017, -2.1040, 10.6001],
            [-1.7037,  4.3962, -2.1457,  1.8338, -2.7260, -2.2482,  3.6532, 10.4014]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7281, -1.8066, -0.5921,  1.7576, -0.3841,  2.1952,  1.6374, -0.8715,
             -0.2955,  0.0356],
            [-1.1904, -1.3149,  0.2640,  6.0180,  2.2199, -2.0708,  3.4404, -3.2138,
             -2.0177,  1.8311],
            [-1.4296, -2.3128,  2.5283,  4.3288, -0.7002,  2.8006, -2.4194, -0.2023,
              2.1487, -2.7193],
            [ 0.0518,  4.3255, -1.5168,  3.3584,  3.9767, -2.5147,  0.4963, -0.4541,
             -1.5854, -1.3014],
            [-2.4841,  1.8935,  0.5617, -1.5113,  3.7751,  5.4290, -2.5756, -7.7995,
             -1.7105,  5.9302],
            [-3.2933,  4.6144,  3.7752, -3.8096,  7.6592,  0.0322, -1.5235, -7.4436,
             -2.0176,  4.1010],
            [-4.9157,  7.1918, -5.1919,  0.8290,  3.2747,  1.3291,  6.4630, -6.3315,
             -1.2361,  1.0160],
            [ 4.2845, -4.2930, -4.8270,  1.0748, -1.9045,  6.4990, -4.7034, -1.8080,
              3.6760, -1.4382],
            [ 2.3366, -4.3440, -3.6789,  3.9587,  3.5475, -1.3362, -4.7950,  5.9557,
              1.9280, -3.0894],
            [ 0.2224, -5.8336,  1.4653,  2.2812, -1.3716, -2.1404,  1.0095,  3.8572,
             -0.5122, -1.1936]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.216 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
