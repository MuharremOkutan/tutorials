.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_beginner_transfer_learning_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning tutorial
==========================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train your network using
transfer learning. You can read more about the transfer learning at `cs231n
notes <http://cs231n.github.io/transfer-learning/>`__

Quoting these notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios look as follows:

-  **Finetuning the convnet**: Instead of random initializaion, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.




.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os
    import copy

    plt.ion()   # interactive mode







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.



.. code-block:: python


    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")







Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.



.. code-block:: python


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :class: sphx-glr-single-img




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving the best model

In the following, parameter ``scheduler`` is an LR scheduler object from
``torch.optim.lr_scheduler``.



.. code-block:: python



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        best_model_wts = copy.deepcopy(model.state_dict())
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    scheduler.step()
                    model.train()  # Set model to training mode
                else:
                    model.eval()   # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for inputs, labels in dataloaders[phase]:
                    inputs = inputs.to(device)
                    labels = labels.to(device)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    # track history if only in train
                    with torch.set_grad_enabled(phase == 'train'):
                        outputs = model(inputs)
                        _, preds = torch.max(outputs, 1)
                        loss = criterion(outputs, labels)

                        # backward + optimize only if in training phase
                        if phase == 'train':
                            loss.backward()
                            optimizer.step()

                    # statistics
                    running_loss += loss.item() * inputs.size(0)
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects.double() / dataset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model_wts = copy.deepcopy(model.state_dict())

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))

        # load best model weights
        model.load_state_dict(best_model_wts)
        return model








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images




.. code-block:: python


    def visualize_model(model, num_images=6):
        was_training = model.training
        model.eval()
        images_so_far = 0
        fig = plt.figure()

        with torch.no_grad():
            for i, (inputs, labels) in enumerate(dataloaders['val']):
                inputs = inputs.to(device)
                labels = labels.to(device)

                outputs = model(inputs)
                _, preds = torch.max(outputs, 1)

                for j in range(inputs.size()[0]):
                    images_so_far += 1
                    ax = plt.subplot(num_images//2, 2, images_so_far)
                    ax.axis('off')
                    ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                    imshow(inputs.cpu().data[j])

                    if images_so_far == num_images:
                        model.train(mode=was_training)
                        return
            model.train(mode=was_training)







Finetuning the convnet
----------------------

Load a pretrained model and reset final fully connected layer.




.. code-block:: python


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, 2)

    model_ft = model_ft.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)







Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.




.. code-block:: python


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.5327 Acc: 0.7664
    val Loss: 0.2083 Acc: 0.9281

    Epoch 1/24
    ----------
    train Loss: 0.4346 Acc: 0.8033
    val Loss: 0.1720 Acc: 0.9542

    Epoch 2/24
    ----------
    train Loss: 0.5999 Acc: 0.7951
    val Loss: 1.3216 Acc: 0.6601

    Epoch 3/24
    ----------
    train Loss: 0.8856 Acc: 0.7664
    val Loss: 1.7883 Acc: 0.7516

    Epoch 4/24
    ----------
    train Loss: 0.5915 Acc: 0.7951
    val Loss: 0.5412 Acc: 0.7974

    Epoch 5/24
    ----------
    train Loss: 0.5777 Acc: 0.7992
    val Loss: 0.3257 Acc: 0.8693

    Epoch 6/24
    ----------
    train Loss: 0.9567 Acc: 0.7172
    val Loss: 0.8918 Acc: 0.7908

    Epoch 7/24
    ----------
    train Loss: 0.4535 Acc: 0.8402
    val Loss: 0.3774 Acc: 0.9020

    Epoch 8/24
    ----------
    train Loss: 0.4681 Acc: 0.8484
    val Loss: 0.3319 Acc: 0.8954

    Epoch 9/24
    ----------
    train Loss: 0.4532 Acc: 0.7992
    val Loss: 0.3729 Acc: 0.8889

    Epoch 10/24
    ----------
    train Loss: 0.4084 Acc: 0.8443
    val Loss: 0.3550 Acc: 0.8889

    Epoch 11/24
    ----------
    train Loss: 0.3794 Acc: 0.8730
    val Loss: 0.3200 Acc: 0.8954

    Epoch 12/24
    ----------
    train Loss: 0.2979 Acc: 0.8852
    val Loss: 0.3329 Acc: 0.8889

    Epoch 13/24
    ----------
    train Loss: 0.3354 Acc: 0.8811
    val Loss: 0.3589 Acc: 0.8627

    Epoch 14/24
    ----------
    train Loss: 0.3088 Acc: 0.8975
    val Loss: 0.3060 Acc: 0.9085

    Epoch 15/24
    ----------
    train Loss: 0.2782 Acc: 0.8770
    val Loss: 0.3045 Acc: 0.9085

    Epoch 16/24
    ----------
    train Loss: 0.2865 Acc: 0.8689
    val Loss: 0.3120 Acc: 0.9020

    Epoch 17/24
    ----------
    train Loss: 0.3469 Acc: 0.8484
    val Loss: 0.3253 Acc: 0.9085

    Epoch 18/24
    ----------
    train Loss: 0.3351 Acc: 0.8730
    val Loss: 0.3011 Acc: 0.9085

    Epoch 19/24
    ----------
    train Loss: 0.2912 Acc: 0.8934
    val Loss: 0.2998 Acc: 0.9085

    Epoch 20/24
    ----------
    train Loss: 0.2803 Acc: 0.8975
    val Loss: 0.3175 Acc: 0.8889

    Epoch 21/24
    ----------
    train Loss: 0.2861 Acc: 0.8852
    val Loss: 0.3158 Acc: 0.9085

    Epoch 22/24
    ----------
    train Loss: 0.2673 Acc: 0.9057
    val Loss: 0.3330 Acc: 0.8889

    Epoch 23/24
    ----------
    train Loss: 0.2794 Acc: 0.8893
    val Loss: 0.3143 Acc: 0.9020

    Epoch 24/24
    ----------
    train Loss: 0.3234 Acc: 0.8730
    val Loss: 0.3009 Acc: 0.9020

    Training complete in 22m 3s
    Best val Acc: 0.954248



.. code-block:: python


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :class: sphx-glr-single-img




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    model_conv = model_conv.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opoosed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.5692 Acc: 0.6762
    val Loss: 0.3116 Acc: 0.8693

    Epoch 1/24
    ----------
    train Loss: 0.4077 Acc: 0.8156
    val Loss: 0.4879 Acc: 0.7908

    Epoch 2/24
    ----------
    train Loss: 0.5931 Acc: 0.7295
    val Loss: 0.2040 Acc: 0.9281

    Epoch 3/24
    ----------
    train Loss: 0.3463 Acc: 0.8566
    val Loss: 0.2189 Acc: 0.9281

    Epoch 4/24
    ----------
    train Loss: 0.4560 Acc: 0.8443
    val Loss: 0.2232 Acc: 0.9412

    Epoch 5/24
    ----------
    train Loss: 0.4420 Acc: 0.7910
    val Loss: 0.1893 Acc: 0.9412

    Epoch 6/24
    ----------
    train Loss: 0.3097 Acc: 0.8730
    val Loss: 0.2353 Acc: 0.9020

    Epoch 7/24
    ----------
    train Loss: 0.3943 Acc: 0.8320
    val Loss: 0.2093 Acc: 0.9346

    Epoch 8/24
    ----------
    train Loss: 0.3473 Acc: 0.8525
    val Loss: 0.2194 Acc: 0.9346

    Epoch 9/24
    ----------
    train Loss: 0.3848 Acc: 0.8238
    val Loss: 0.2168 Acc: 0.9346

    Epoch 10/24
    ----------
    train Loss: 0.3368 Acc: 0.8607
    val Loss: 0.2154 Acc: 0.9346

    Epoch 11/24
    ----------
    train Loss: 0.3785 Acc: 0.8320
    val Loss: 0.2100 Acc: 0.9281

    Epoch 12/24
    ----------
    train Loss: 0.3599 Acc: 0.8402
    val Loss: 0.1955 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.3816 Acc: 0.8443
    val Loss: 0.1741 Acc: 0.9477

    Epoch 14/24
    ----------
    train Loss: 0.4322 Acc: 0.8074
    val Loss: 0.1810 Acc: 0.9542

    Epoch 15/24
    ----------
    train Loss: 0.3212 Acc: 0.8484
    val Loss: 0.1906 Acc: 0.9412

    Epoch 16/24
    ----------
    train Loss: 0.2831 Acc: 0.9098
    val Loss: 0.1903 Acc: 0.9346

    Epoch 17/24
    ----------
    train Loss: 0.3304 Acc: 0.8566
    val Loss: 0.1833 Acc: 0.9542

    Epoch 18/24
    ----------
    train Loss: 0.3302 Acc: 0.8525
    val Loss: 0.1868 Acc: 0.9477

    Epoch 19/24
    ----------
    train Loss: 0.3481 Acc: 0.8238
    val Loss: 0.2098 Acc: 0.9346

    Epoch 20/24
    ----------
    train Loss: 0.3469 Acc: 0.8320
    val Loss: 0.2021 Acc: 0.9346

    Epoch 21/24
    ----------
    train Loss: 0.2673 Acc: 0.8811
    val Loss: 0.1945 Acc: 0.9477

    Epoch 22/24
    ----------
    train Loss: 0.2444 Acc: 0.9016
    val Loss: 0.1959 Acc: 0.9346

    Epoch 23/24
    ----------
    train Loss: 0.2225 Acc: 0.9139
    val Loss: 0.2127 Acc: 0.9346

    Epoch 24/24
    ----------
    train Loss: 0.3510 Acc: 0.8566
    val Loss: 0.1977 Acc: 0.9477

    Training complete in 11m 44s
    Best val Acc: 0.954248



.. code-block:: python


    visualize_model(model_conv)

    plt.ioff()
    plt.show()



.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 33 minutes  53.209 seconds)


.. _sphx_glr_download_beginner_transfer_learning_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
