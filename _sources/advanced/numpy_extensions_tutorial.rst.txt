.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.0435,  9.2411,  8.4828,  6.9260, 16.6407],
            [ 6.3483,  3.6535,  3.5208,  7.6098,  6.3884],
            [ 1.4869,  5.9202,  2.2617, 12.3561,  7.8058],
            [ 6.3096,  7.2410, 16.8310,  2.2451, 10.8401],
            [ 5.5499,  0.7922,  3.8609, 11.9034,  8.3457],
            [ 6.3096,  6.0793,  5.4817,  5.4355, 10.8401],
            [ 1.4869, 11.2646,  4.3302,  2.7916,  7.8058],
            [ 6.3483,  4.4541,  5.6647,  9.7439,  6.3884]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.1300, -1.0192, -0.3121, -0.2690,  2.4468, -1.1433, -0.2059, -0.3940],
            [-1.8425,  1.8173, -1.5142, -0.2027,  0.9170,  0.4160,  1.5446,  0.6132],
            [ 0.7511, -0.9541, -1.5563, -0.4131,  0.1111, -0.5045, -0.3465, -1.1388],
            [ 0.6457, -1.0432,  0.8817, -1.8309, -0.1276, -0.8346,  0.8078, -0.3395],
            [-0.4110, -1.2348,  0.8598, -0.5806, -0.2227,  0.8846,  0.0883, -1.2693],
            [-0.5628, -0.8011, -1.4837,  0.7866,  2.2028, -0.9531, -0.5082, -1.1973],
            [ 1.2140, -0.9445,  0.2973, -0.5934, -0.6147, -0.0362,  0.6290, -0.2848],
            [ 0.3043,  1.3644, -0.8037, -0.1344,  1.0001,  0.4844, -0.2611, -1.0923]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7151,  1.4097,  0.3510],
            [-0.7987,  1.9754, -0.4310],
            [ 1.2954,  0.3446,  0.2764]], requires_grad=True), Parameter containing:
    tensor([[0.4375]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.5814, -0.2922, -0.7897, -0.3582,  4.4987, -1.2233,  0.7264,  2.7652],
            [-3.2584,  1.3821, -1.8852,  2.2817,  1.7887, -1.2046,  5.0212,  4.9636],
            [ 6.2367, -1.7520,  2.7267,  4.6054, -5.4059,  4.8721,  3.8588, -0.6987],
            [ 2.5236, -1.6546,  5.8012, -0.3579, -0.3327, 11.7198,  2.1423, -2.2703],
            [-2.0840,  4.1132, -2.6574, -4.4403,  8.8760,  2.8334, -1.2612,  1.5890],
            [-0.2938, -1.9815, -0.6932,  4.8793,  1.3239,  0.9792,  1.9690,  2.1282],
            [-1.2483, -3.7450,  2.4111,  6.3867, -5.5778,  6.7523, -0.1218,  1.3478],
            [ 0.9611,  0.0340,  4.6789,  0.0239, -1.5669,  5.2990,  2.3887,  2.8682]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.6932,  0.2920,  2.7987, -0.2325, -0.2302, -0.0013,  1.1902, -0.5792,
              1.3505,  0.3442],
            [-0.9898,  0.0073,  5.6352, -2.3203,  0.6497,  0.9199,  1.3124, -1.2930,
              1.5977, -0.5086],
            [ 0.9779,  0.8682,  4.8366, -0.7266,  1.8267,  0.5362,  1.0318,  4.1358,
              0.0167,  0.2946],
            [-0.0091,  2.2004,  2.0715,  1.2910, -1.3672,  0.2329,  0.5954,  0.8780,
              1.2644,  0.5996],
            [ 0.1847,  1.8913,  1.3016, -2.1423, -2.8304,  5.5056, -1.2820,  0.0706,
              3.0249, -0.8141],
            [ 0.7843, -0.8304,  1.3169, -4.2632,  1.3643, -0.4015,  2.8478, -0.5262,
             -0.3134,  0.5218],
            [-1.8423,  0.9998, -2.8681,  1.5625, -1.0930, -2.8194,  6.5311, -5.9224,
              1.7573,  0.1649],
            [ 0.0068,  3.2897, -1.2643,  4.4064, -3.3837,  3.9937, -0.5554, -1.9267,
             -1.3616, -0.7162],
            [ 0.3533,  0.9074,  1.7883, -2.2963,  0.3034,  3.0344, -1.3100,  1.3904,
             -2.1235,  0.7309],
            [ 0.6225, -0.1203, -0.6423, -0.2745,  0.3482, -1.1771, -1.0260, -2.1660,
             -0.6142, -0.3581]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.207 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
