.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.4941,  4.3696,  2.2405,  2.3233, 11.6014],
            [ 6.1502,  6.5613,  6.7236,  2.1461,  7.6837],
            [ 6.0883,  6.2755,  6.1164,  1.9100, 15.4793],
            [ 1.6131,  7.9044,  9.2140,  8.4430, 17.2972],
            [ 4.8339,  5.0533, 10.5234,  3.1083, 10.7995],
            [ 1.6131, 14.0946,  7.1340, 14.0683, 17.2972],
            [ 6.0883,  0.6944,  4.8751,  9.8343, 15.4793],
            [ 6.1502,  6.1715, 10.4599,  5.5396,  7.6837]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.0966,  1.7531, -2.3070,  1.3321, -0.0683, -0.4158, -0.8969,  1.1644],
            [ 0.7933, -1.2375,  1.7014, -0.2180,  1.0486, -1.4275,  1.3133, -1.4299],
            [-0.8752, -1.4355, -0.1547,  0.6466,  0.5793, -0.6789, -0.5340, -0.6423],
            [-0.6895,  0.6808, -0.8209, -1.7411,  0.0620,  0.5256, -0.7338, -0.0482],
            [ 0.1537, -1.6350,  1.6381,  0.1252,  0.2820,  0.5378, -0.6659, -2.5704],
            [ 0.5471,  0.1871, -0.3588, -1.0376, -0.2047, -0.3298,  0.9903, -1.6172],
            [ 0.1586, -0.2189, -0.7458, -0.7548, -0.5095, -2.7586, -0.3392,  0.7684],
            [-0.7534, -1.7030,  1.0432,  0.7232, -0.9098,  0.7620,  0.4068,  0.1458]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.7224,  1.1312, -0.5175],
            [ 0.4448,  0.1315,  0.6492],
            [ 1.3454,  0.4603,  1.1425]], requires_grad=True), Parameter containing:
    tensor([[0.1645]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5699,  3.2862,  2.9712,  4.0149,  3.1127,  1.1749,  0.4800,  1.4619],
            [ 3.1025, -0.7927,  2.4753, -0.8211,  1.3644,  0.9071,  5.7698,  2.2589],
            [ 1.2224,  0.6028,  0.4363,  3.0908,  6.2511,  0.6277, -3.9841,  2.5841],
            [-1.5227, -5.2085, -0.9651,  2.8703, -4.9091, -3.5829, -3.7117,  0.7043],
            [-0.5805, -2.7069, -2.3337, -2.2218, -0.9344,  2.3433, -0.2378,  0.4829],
            [ 1.6381, -2.6786, -2.3572, -1.3776, -2.4182, -1.8834, -5.4491, -0.1522],
            [ 3.5063,  5.5325, -0.3592, -6.3788, -1.3611, -0.0483,  1.6399,  3.9795],
            [ 5.3741,  2.9756,  2.4791, -0.2655, -0.6083, -0.4631,  2.2053,  4.5393]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1367,  2.3232,  1.5559, -2.3687, -1.0655,  0.6473,  1.0340,  0.2728,
              0.1410, -0.1025],
            [-2.5841, -3.1717, -2.2105, -0.6545, -4.3352, -3.4503,  0.0685, -0.8623,
             -1.4001,  0.7656],
            [-1.3348,  2.8294,  0.2177,  2.1310, -5.2694, -3.2637,  1.8914, -0.4829,
             -0.4406, -0.3985],
            [-4.8667, -3.5453, -1.0682,  0.2624, -1.5097, -2.7974, -1.4161,  1.5806,
              1.1944, -2.3875],
            [-0.0326,  1.0054,  0.6869,  0.4661, -3.8135,  4.0034,  3.7004,  6.3493,
              1.9381, -0.1521],
            [-0.8568,  3.0219, -0.4406, -1.5627,  2.7418,  1.9113,  0.3386,  0.1024,
              2.6867,  3.2987],
            [ 1.8381,  4.2311,  0.7888, -4.1536,  0.0702, -3.4505,  2.4503,  0.7550,
              3.3966,  0.6078],
            [ 1.0387,  2.0701,  2.4013,  2.6881, -1.5559, -3.4785, -6.4155, -4.0607,
             -1.5299, -1.4447],
            [ 0.6707,  2.3650, -0.3679,  1.9544, -2.3651,  0.1822, -4.3187, -1.0934,
             -2.9729,  0.2482],
            [-0.2403, -0.8286,  0.7970, -0.3630,  0.3133, -2.4560, -4.3036, -2.7544,
             -2.5322,  0.0330]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.218 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
