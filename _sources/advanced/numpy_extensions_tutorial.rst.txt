.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.4053,  2.0608,  8.2212,  8.3822,  2.9722],
            [ 6.6358,  5.1077, 11.2107,  2.2178, 13.4658],
            [ 4.5403, 11.3027,  6.8623,  1.6030,  7.7895],
            [11.0249,  5.1895,  8.5346,  9.5396,  6.7680],
            [ 6.2221,  5.7642, 12.1512,  1.1541,  3.8743],
            [11.0249,  7.2128, 11.0478, 11.4155,  6.7680],
            [ 4.5403,  7.0970,  7.6626,  9.6075,  7.7895],
            [ 6.6358,  3.1554, 11.3419, 10.4431, 13.4658]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.7472,  0.2902, -0.4339, -1.4561,  1.4309,  0.3560,  1.7044, -0.8707],
            [ 1.6039, -1.3449, -1.3176, -1.0379,  0.5485, -0.3817, -0.0685, -0.3153],
            [ 0.4198,  0.0083,  1.5198,  1.2805, -0.4887,  0.5880,  1.1958, -2.2368],
            [-1.6711,  0.1909, -0.5115,  0.9088, -1.0757, -2.7594,  1.1299, -0.2060],
            [ 0.5210,  0.6463, -0.8111,  0.2865,  0.2582,  0.3452, -1.2444, -0.3430],
            [-0.3738, -0.7692, -0.6638, -0.9585, -0.3062, -0.1409,  0.1315,  1.0249],
            [-1.2495,  0.2114, -1.2181, -1.3677, -0.6764,  0.9445, -0.7592, -1.1900],
            [ 1.4061,  0.7192, -0.6939,  1.0193, -0.3404,  1.3658, -1.9301, -0.9965]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4478, -0.8980, -0.7931],
            [-1.7684, -0.8303, -1.4952],
            [-1.2869, -0.7592, -0.5877]], requires_grad=True), Parameter containing:
    tensor([[-0.3507]], requires_grad=True)]
    Output from the convolution:  tensor([[  0.3676,  -4.5371,  -3.5008,   1.1610,  -0.2712,   0.0417,  -2.6276,
              -1.3728],
            [ -1.5732,  -1.8570,  -0.3089,   4.8840,   1.4687,  -1.5586,   1.4147,
               1.5256],
            [ -1.0474,   3.6227,   2.1415,   3.7250,   0.4593,  -3.3241,   0.6187,
               1.4200],
            [  1.2989,   2.4111,  -0.6739,   0.8766,  -1.1569,   3.3446,   0.9460,
              -1.3958],
            [  4.3750,  -1.8041,  -2.5118,  -1.1813,   2.4862,  -1.2622,   2.4277,
               0.0541],
            [ -2.4142,  -2.8303,  -5.0842, -10.3402,  -0.2857,  -4.5420,   1.4263,
               6.5275],
            [ -1.5365,  -6.9929,  -7.5974,  -7.3407,  -5.3936,  -1.2497,   0.8622,
               1.3396],
            [  3.1164,  -0.4973,  -7.1644,  -6.7040,  -3.5600,  -1.9048,  -0.4176,
              -1.8190]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5362, -1.5131, -0.5853,  1.8114,  1.3557, -1.4524,  0.3405,  1.0456,
             -0.7762, -0.5375],
            [-3.1295,  2.2645,  3.0534,  4.3440,  1.8089,  2.9155, -0.3437,  3.1856,
              0.4761, -1.3995],
            [ 2.5770,  3.7978,  8.8474,  8.1364,  4.4560,  2.4342,  4.9744,  1.0517,
              1.8174, -1.3535],
            [ 3.1073,  2.0611,  4.4660,  1.2785, -0.6371, -1.7814,  0.6649, -0.9225,
              0.6209, -0.4953],
            [-2.3858, -2.2352, -2.2217, -1.4732, -3.6274, -5.3218, -0.3729, -2.0108,
              0.4232,  0.8468],
            [-5.7233,  3.8261, -3.6401, -1.0921, -1.3329, -0.1349, -0.3910,  3.3413,
              0.8217,  0.4799],
            [ 3.4297, -3.8575,  4.3399, -3.7910,  3.3419, -4.1451,  7.4531,  0.6739,
              1.8990, -0.5580],
            [ 2.1954,  0.7544,  3.3676,  0.2790,  0.4786,  3.5195,  1.1521,  5.1915,
             -0.9711, -0.2246],
            [-0.4800,  3.6412,  2.9349,  2.4622, -1.0017,  2.4862,  1.4507,  0.4692,
              0.3381, -0.7923],
            [ 0.3313,  1.4325,  0.9438,  0.8036,  0.2546, -0.3173,  0.7749, -0.6475,
             -0.1455, -0.4678]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.213 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
