.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2796, 11.6141,  8.4217, 12.5567,  4.3563],
            [ 5.5928,  7.8269, 10.6397, 10.9596,  1.9415],
            [ 7.8206,  8.3475,  2.8583, 11.9135,  6.7117],
            [ 8.4470,  4.5321,  6.7916,  4.7744,  4.8795],
            [ 1.4287,  1.1484, 12.2663,  3.2907,  1.6071],
            [ 8.4470,  1.8638, 15.3627,  6.8694,  4.8795],
            [ 7.8206, 11.6961,  5.7473,  9.0757,  6.7117],
            [ 5.5928,  9.4520,  4.8478,  3.7671,  1.9415]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 1.2140, -0.9445,  0.2973, -0.5934, -0.6147, -0.0362,  0.6290, -0.2848],
            [ 0.3043,  1.3644, -0.8037, -0.1344,  1.0001,  0.4844, -0.2611, -1.0923],
            [-1.8476, -1.0990,  0.4021,  2.5718,  0.1483, -0.0853,  0.9258, -1.0010],
            [ 1.9927, -1.5848, -0.3066,  0.8150,  1.1003,  0.7711, -1.7091, -1.2767],
            [ 1.1514, -0.5137,  1.9360,  0.4477,  0.0442,  1.3028,  0.2415,  1.8046],
            [-0.0487, -1.9872,  0.1966,  1.1725,  0.1562, -0.2561,  0.3196,  1.2662],
            [-1.0126, -0.9991, -0.6336,  0.5245, -0.0330,  0.4500,  0.0163, -0.0547],
            [ 0.1759, -1.6819,  0.4687, -0.8650,  0.4050,  1.5177, -0.0366,  1.4590]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5524,  0.1448,  1.2277],
            [ 1.1729, -1.0644, -0.5817],
            [ 1.1333,  0.8557,  0.3610]], requires_grad=True), Parameter containing:
    tensor([[1.2952]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0467,  3.7667,  4.3121,  3.5149, -4.3483,  2.7264,  6.8223, -3.2473],
            [ 1.2021,  3.3167, -2.5105,  1.1436,  5.3310,  1.7815,  1.3955, -1.0737],
            [-2.9017,  1.5514,  0.3299, -1.1703, -1.1157,  2.3671,  4.6616, -1.2664],
            [-1.7093,  0.5245,  2.4071,  3.5880,  1.5026,  0.3296,  5.3648,  4.3345],
            [ 3.0614, -1.6667,  2.5974,  2.3071,  2.1277,  1.3233,  1.3530,  1.4557],
            [ 4.4590,  0.3562,  0.6832,  4.2806,  3.2193,  2.3933,  2.6580,  0.1784],
            [ 0.1682,  2.6206, -0.0779,  0.6970, -0.1478, -1.9040, -0.9629,  5.1165],
            [ 1.4555,  5.2708,  2.1075,  2.8927,  2.9997,  6.2380, -0.0811,  1.1661]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3143,  0.2590, -0.1806,  0.5819,  1.4486, -2.3527,  0.7257,  1.2466,
             -0.0908,  0.7661],
            [ 0.4019, -0.7892,  2.6340, -3.3619,  0.1331,  2.5301, -1.1184, -0.4846,
             -1.5113, -1.9536],
            [ 1.9979,  0.2698, -0.8066, -1.4147,  0.1814, -2.5546,  0.5929,  0.9658,
              1.6869,  1.7185],
            [-0.7106,  0.4731,  0.9757, -3.8470, -0.2638,  2.5546, -0.7208, -1.8911,
             -2.6077, -2.1332],
            [-2.0976, -4.7004, -1.7513, -2.3990, -1.7653, -3.5177, -0.8331,  3.1692,
              1.8130,  0.3468],
            [-0.9718, -5.2134, -3.3068,  2.0892,  0.6905,  3.1241, -3.3287, -3.7264,
             -0.6758,  0.3286],
            [-2.3081,  0.0795, -3.0554,  1.2183, -1.3587,  0.8508,  2.0047,  0.5487,
             -1.6948,  0.1917],
            [-2.2386,  0.7302,  0.1552,  1.8547,  2.0446,  1.4350, -2.0436,  1.3943,
              1.0016, -0.4743],
            [ 0.1068,  2.4677, -1.8113, -2.5821, -1.7219, -0.2635,  0.7858, -0.7485,
              0.0578,  0.3311],
            [ 0.4860,  2.4914,  1.8597,  0.6117, -0.6637, -1.1045,  0.0122, -0.0158,
             -0.0311, -0.1024]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.209 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
