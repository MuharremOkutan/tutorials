.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9855,  8.1418,  8.5587, 10.2003,  0.0357],
            [ 4.0873,  2.3986,  1.4453, 11.6930,  7.9978],
            [ 7.0121,  9.1478,  4.9527, 10.8396, 12.0585],
            [ 5.2634,  7.3980,  1.7602,  3.7295, 10.2977],
            [ 3.4247, 11.1064,  6.0423,  3.3522, 11.3397],
            [ 5.2634,  5.8454,  4.1940,  4.6596, 10.2977],
            [ 7.0121,  6.7915,  5.1149,  6.9089, 12.0585],
            [ 4.0873, 17.4218,  5.9864,  5.6256,  7.9978]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.4115, -1.4011,  0.9839, -0.0625,  0.7218,  1.7114,  0.5600, -1.4274],
            [ 0.5380, -0.6922,  0.9089, -0.6505,  0.7952, -0.0355, -0.2328, -0.9328],
            [-2.1381,  0.3134, -1.6936, -0.2231, -0.2463, -0.0951, -0.3826,  0.5319],
            [ 0.6717,  0.3490, -0.7431, -0.5275,  1.5535, -1.9401,  0.7960, -0.5411],
            [ 0.3642,  0.2202, -0.5054, -0.4305, -0.2992,  0.4741,  1.2635, -0.5862],
            [-0.3922,  1.6541, -0.2326,  0.5850, -0.5410, -1.0345, -1.1011, -1.7058],
            [-0.2690,  2.4468, -1.1433, -0.2059, -0.3940, -1.2473, -0.6066,  0.4727],
            [-0.2027,  0.9170,  0.4160,  1.5446,  0.6132,  1.0626, -0.6611, -1.5185]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4252,  0.3484,  0.1324],
            [ 0.1904, -0.9746,  1.1706],
            [-0.4261,  1.4437, -1.6303]], requires_grad=True), Parameter containing:
    tensor([[-0.3707]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.1458,  3.6647,  0.7232, -2.9857,  2.7054, -1.0288, -2.0620,  0.8949],
            [ 0.4148, -1.1288, -0.2728,  0.9228, -3.8236, -0.0248, -2.1290,  2.1119],
            [ 0.4599,  1.2306, -5.1199,  2.8159, -0.2624, -2.2134, -0.1590,  1.2101],
            [ 2.7497, -1.8875,  0.3972,  0.1292, -1.2127,  1.6879,  1.7482, -4.8083],
            [-5.2650,  1.5209,  0.6428, -1.8663,  1.3670, -2.0938, -2.5033,  1.4888],
            [ 0.4092, -3.5775,  2.9625,  1.8803, -6.6910,  5.4266, -2.6076,  3.9907],
            [ 2.8667,  3.1746, -9.6881,  2.1229,  5.1916, -6.7416,  2.7975, -4.3051],
            [-0.1345, -0.9483,  5.1879, -6.4070,  0.6702,  1.7318,  0.4827, -4.0596]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0851, -0.9100,  0.1560,  0.5334,  0.5474,  0.0522,  0.8962, -0.4829,
             -0.8139, -0.1707],
            [-0.4900,  1.5998, -2.4750,  1.0342,  1.7977,  0.1596, -1.3150,  2.2953,
             -1.8387, -1.5200],
            [ 0.2329, -1.9091,  5.1196, -4.4457, -0.8376,  1.2769, -0.6614, -3.9272,
              4.1072,  2.0883],
            [-0.3749,  2.2730, -2.7440,  1.1703, -1.8854, -0.0753,  3.0317,  1.0175,
             -3.7807,  0.7882],
            [-0.4346,  0.7082, -0.7169,  0.9848,  0.3964, -3.6010,  3.2325, -2.1931,
              3.3246, -0.8190],
            [-0.2424, -0.4129, -0.4527,  0.9293,  1.1027,  2.9622, -3.7816,  0.6022,
              0.9500,  0.2550],
            [-0.2052,  0.0365, -0.0755, -0.8070, -0.0154,  2.9847, -2.5091,  3.8764,
             -3.8612,  0.7748],
            [-0.7100,  1.2024, -0.7224, -0.8388,  1.4157, -2.9408,  0.9021, -1.9782,
              2.6204, -1.3064],
            [ 0.0717, -0.5258,  0.3300,  1.1257, -1.8637,  1.6327, -1.5317, -0.6580,
             -0.4459,  1.6170],
            [-0.2780,  0.7784, -0.4380, -0.8260,  0.2363, -0.2860,  0.6919, -0.8966,
              1.9777, -2.3012]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.213 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
