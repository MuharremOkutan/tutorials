.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.5223,  5.7889, 13.4678,  5.2135,  4.5729],
            [ 4.6951, 12.7672,  4.1957,  8.6893, 10.2087],
            [12.0524,  5.2078,  2.9994,  8.1848,  6.1738],
            [ 9.9804,  6.9222, 10.8977,  8.5769,  9.4792],
            [ 3.1364,  7.6181,  1.8821, 13.8070, 12.3435],
            [ 9.9804, 13.0619, 12.2273,  3.9558,  9.4792],
            [12.0524, 19.1881, 13.0017,  9.5112,  6.1738],
            [ 4.6951,  1.3821,  5.4406,  7.8009, 10.2087]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.3002, -0.0886,  0.5746, -0.6532, -0.0553, -0.1597, -1.1267,  0.5907],
            [ 0.1994, -0.3421, -1.5788, -0.6475,  0.5579,  0.3134, -0.7732,  0.3780],
            [-1.3028, -2.3565, -1.4492,  0.2382, -0.3414,  0.3701, -1.6241,  1.1627],
            [-0.4786,  0.2010, -3.0932, -0.5411,  0.7530,  1.3904, -0.6876,  0.3508],
            [ 0.4820,  0.1630,  2.6691, -0.9453,  0.6594, -0.6830, -0.2188,  0.2442],
            [-1.0301, -1.2263,  0.4121,  1.0001, -2.0568, -1.6243, -1.4494, -0.4685],
            [-0.2457, -0.9098, -1.9768, -1.0174,  2.8252, -0.1516,  0.1765, -0.3429],
            [ 2.1192,  2.0299, -1.8662,  0.3475, -0.7488, -1.8824,  1.3274,  0.7857]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3727,  0.7500, -0.1687],
            [-0.2910, -0.8536,  0.7146],
            [ 0.4622,  0.9635, -0.8598]], requires_grad=True), Parameter containing:
    tensor([[-0.7925]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.2593, -6.2347, -0.2319,  1.2748, -0.3566, -0.9693,  0.8198,  0.9972],
            [ 4.2550,  1.1607, -2.7431, -1.9243,  1.2289,  2.1680, -3.7238, -3.7985],
            [-2.6949, -0.7254,  5.0897,  0.0899,  1.5686, -4.4938,  0.4095, -0.9030],
            [ 1.7967, -1.6094, -4.3898, -2.2022, -2.4443,  4.3658,  1.5253,  0.7778],
            [-1.6323,  2.1920, -0.1848, -3.0309,  1.6165, -5.1825, -5.0063,  0.9178],
            [ 3.8320, -1.5510,  2.3638,  1.6966, -4.0507,  5.9195,  4.5795, -1.0794],
            [-2.3785,  0.2976, -1.5207, -2.3982, -1.3263, -4.5293, -0.7150,  1.9479],
            [ 2.1469,  0.5957,  0.7031, -1.2141,  1.8327,  3.8468,  2.6807, -2.7927]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4402, -1.2366, -1.1478, -3.5498,  2.8987,  5.9556,  0.4292,  0.0898,
              0.5266, -0.1004],
            [-0.5183,  1.0746, -1.6495, -0.8223,  1.0984, -4.9554,  1.0322,  0.4518,
             -1.6272,  0.5965],
            [-1.0226, -2.1833, -0.5921,  2.5623,  0.9269,  6.2881, -3.4296, -3.1637,
              1.4598, -1.1027],
            [ 3.0005, -0.2235, -1.0407, -4.4657,  1.0659,  1.6580,  3.4697, -0.4751,
             -0.6274,  0.2473],
            [-2.1218, -3.5905,  1.1152, -1.0677,  0.0226,  1.7513, -1.3810,  0.7621,
             -0.7006,  0.9344],
            [ 1.4348,  1.2120, -4.0045,  1.1212, -3.3012,  4.3002,  0.5592,  0.1338,
              0.3402, -0.2633],
            [ 0.2057,  1.9926,  1.9245, -2.6254,  0.2558, -1.6473,  3.3218, -0.3777,
              0.4843, -0.2178],
            [-1.7280, -3.2013, -1.7081,  2.7662,  1.0210,  1.7050,  1.2362, -5.1882,
             -0.9927,  0.5123],
            [ 0.5637,  2.5822,  1.1543, -3.1659, -1.3619, -0.1838,  1.0122,  3.5085,
             -0.9241, -0.9685],
            [-0.5575, -1.5574,  0.4984,  1.5570,  0.2994,  0.4461, -0.8612, -1.8808,
             -0.5473,  1.2589]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.210 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
