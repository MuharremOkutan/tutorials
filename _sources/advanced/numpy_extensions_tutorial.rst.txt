.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2025,  4.1679,  6.2214,  1.8934,  9.5871],
            [14.9063,  1.0716,  8.3214, 15.1791,  2.3723],
            [10.1740,  8.7664,  5.2858,  4.4262,  8.3752],
            [ 4.4298,  4.2976, 18.8507, 14.7061,  4.1428],
            [ 3.9357,  4.6852,  3.2429,  9.9290,  8.0788],
            [ 4.4298,  2.7803, 11.2697,  5.4592,  4.1428],
            [10.1740,  8.7327,  6.2918,  9.3622,  8.3752],
            [14.9063,  5.1512,  3.4533,  8.4551,  2.3723]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.3727,  0.0557,  0.8209, -0.0787,  0.3001, -1.1063, -0.2964,  0.2392],
            [ 0.4055, -0.7306, -0.5540, -0.3657, -0.2719, -0.2766,  0.1997, -0.5204],
            [ 0.6491, -0.3412, -1.6123, -2.3286,  2.0065, -1.0999, -0.8809,  0.8183],
            [-1.3211,  0.8611,  0.4453,  1.9705, -0.6200, -0.6295,  0.4978, -0.3760],
            [ 0.2424,  0.8194,  0.0220, -0.3722,  0.7574, -0.2346,  0.1317, -1.8359],
            [-0.6366, -0.3226,  0.7084, -0.3648,  0.8716, -0.1778,  0.7009, -0.1763],
            [ 1.6557,  0.1122,  1.1077,  0.3185,  0.0858,  1.5751,  1.6164, -0.1407],
            [ 3.1634, -0.4651, -0.0339,  1.4043,  0.8230,  3.1595, -1.2167, -0.5824]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1070,  0.9162, -0.3856],
            [ 0.0971,  0.4970, -0.2718],
            [-1.6168, -2.3689, -1.1138]], requires_grad=True), Parameter containing:
    tensor([[-0.6880]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.3868, -3.9181, -0.6222,  4.4327,  0.1702, -2.6045, -2.5484,  3.3798],
            [-2.8642, -2.4954, -5.9343, -1.6785, -6.0401, -2.7995, -0.2182,  2.0795],
            [-3.8479, -5.2656, -5.5426, -1.0174, -0.0636,  3.3474,  1.2563,  1.6108],
            [-3.6310, -4.5660, -0.2212,  0.8445,  2.8252,  2.2702, -0.2789, -4.4264],
            [-1.8313, -3.5744, -2.9322, -8.4224, -4.5836, -4.2526, -7.9075, -4.7010],
            [-2.7040, -3.3070,  0.4976,  1.4262, -3.3458, -3.2182, -1.9084,  1.1267],
            [ 0.1781,  2.2167, -1.0017,  0.6198, -3.8378, -0.6430, -3.2745, -2.2526],
            [-2.6808, -4.7018, -6.7908, -5.7887,  1.0494, -0.5222,  1.0843,  2.2230]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3831, -1.0356,  0.3490, -1.4059,  2.0514, -0.4860, -1.4402,  0.0209,
              0.6009, -0.4087],
            [-1.4391,  2.3183, -0.8313,  1.7385, -0.7679, -1.2261,  0.8895,  0.9665,
             -0.2079, -0.0445],
            [-3.3799,  0.3387, -5.0990, -6.6771, -2.4012,  2.5445,  3.5556, -5.6513,
             -2.7436, -1.1932],
            [-2.9745,  0.9922, -2.6250,  2.1510,  3.5000, -0.7692, -1.6185,  0.0650,
              2.4333,  0.5527],
            [-3.1784, -6.9500, -3.5442,  1.8297, -2.4762, -5.5519,  0.9799,  3.2047,
              0.5357, -0.6126],
            [-2.3445, -1.5621,  2.9636, -1.1862, -2.1345,  1.5656, -2.0480,  0.9757,
             -1.3981,  0.2343],
            [ 1.1904,  3.3963, -5.1809, -6.4649, -2.8544,  1.1298, -1.6610, -2.0241,
             -1.7478,  0.1471],
            [-0.3941, -2.9463,  2.5458,  6.4199,  8.8984,  3.0701,  4.9819,  1.6485,
              2.9661,  0.7166],
            [-0.6027,  0.4976,  0.7451, -0.9604,  0.0168, -0.4137,  1.4886,  1.4567,
              1.5976,  0.0352],
            [ 0.8116,  0.5419, -0.1301, -2.7056, -2.0724,  0.3813,  1.5521, -0.5249,
             -1.5984, -0.9736]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.228 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
