.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9604,  9.3067,  5.5235, 11.5891,  6.7388],
            [ 6.5095,  7.6062,  2.6768,  8.9207,  2.8121],
            [ 5.3952,  1.7594,  3.5414,  7.4133, 12.9309],
            [11.5716,  1.0204,  3.7110,  6.4594,  4.2824],
            [ 9.6330,  5.3463,  8.6271,  6.0136,  2.7210],
            [11.5716,  3.4878,  4.6930,  3.3739,  4.2824],
            [ 5.3952,  2.5512,  5.7525,  9.0534, 12.9309],
            [ 6.5095, 11.6451, 12.1875,  3.4134,  2.8121]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.6672,  0.1225,  0.2355, -0.7698, -0.0751,  0.7906, -0.3862,  1.6360],
            [-0.0248,  0.2805, -0.4201, -0.8258,  0.2605, -0.2605,  0.9373,  0.4845],
            [ 0.7449,  1.9235,  0.5156,  0.8791,  0.6879, -1.2021,  1.7797,  0.1357],
            [-0.2168, -0.0560, -1.1134, -0.3933,  0.4671, -0.7616, -1.2259,  0.1691],
            [-0.2584,  0.8723,  0.5550,  1.1142, -0.0560,  0.3906,  0.3296,  1.3980],
            [ 0.7523, -0.3270, -0.3913, -0.8574,  0.8219,  1.1443, -1.0334,  0.9245],
            [-0.7677, -0.1138, -0.9212, -1.5584,  1.0761,  0.2712,  0.8512, -1.2371],
            [-1.2286,  0.3466, -1.2681, -1.2586, -0.0812,  2.1215,  0.2313,  0.4660]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2469,  1.0064, -1.6435],
            [-0.8428, -0.0883, -0.2537],
            [ 0.9817, -1.0900, -0.7084]], requires_grad=True), Parameter containing:
    tensor([[-0.3498]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4025, -3.3637,  0.9632,  0.4920,  0.8567,  1.1471, -1.3132,  2.3651],
            [ 2.9132, -0.1800, -0.4573, -1.6460, -1.2945, -2.1929, -0.6197, -2.8212],
            [-0.2460,  1.5490,  3.0198, -3.6119, -0.1979, -3.0617,  0.1810, -1.5457],
            [-6.5764, -0.4750, -0.5898, -1.5818,  1.3817, -1.5877,  0.4428, -3.7007],
            [-0.5338,  2.0795, -1.1170, -0.3598, -2.3129, -0.4997,  1.3692,  1.1797],
            [ 2.5494,  1.0222, -3.7515, -3.1543, -2.3042,  0.9599, -0.9738,  3.7588],
            [-3.2952, -0.9280, -1.4127, -1.1518, -2.5986,  1.2133,  0.2793,  0.1199],
            [-3.4677, -1.1576, -4.0872,  2.2237, -2.1483,  2.2649, -6.4255,  4.2494]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0106, -0.3797,  1.5044, -2.5698,  0.7152, -3.4762,  1.7456, -0.0587,
             -0.2246, -2.5937],
            [-0.1084, -1.0345, -1.7089, -0.8045,  0.5503, -1.1173, -2.0108, -0.6779,
             -0.7895, -0.6528],
            [-0.3159,  2.2177, -1.3158, -2.5866, -2.6920, -2.1247,  3.0061,  0.5714,
             -4.3298, -3.0082],
            [-0.1371, -1.4061, -0.5846,  0.9748, -0.6040, -0.5769, -0.1600, -0.1002,
             -0.9645, -0.0718],
            [ 0.6182, -0.6214,  2.2614, -2.7491,  2.6540, -0.5796,  3.1789, -0.1502,
              0.0857, -2.0078],
            [ 1.2024, -1.3996,  1.4844, -0.3643, -2.3412,  3.0251,  4.1114, -4.5533,
              5.1624, -3.5569],
            [-1.3358,  2.1749, -3.4804,  3.4057, -1.8955, -0.8866, -2.2595,  2.2280,
             -0.2767, -2.3224],
            [ 0.0335,  2.0279, -0.6188, -5.1025,  0.2657,  1.5075, -3.2750, -0.5700,
             -0.6388, -2.2192],
            [-1.6905, -0.5111,  1.5213,  0.7883,  1.4677, -4.6754, -0.0268, -0.1610,
             -1.2651, -0.6140],
            [ 1.6152, -1.5699, -2.6754,  1.4759,  0.8009,  1.0195, -1.9301, -0.3272,
             -0.1202, -0.2235]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.209 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
