.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.8343,  4.1731,  6.5454,  4.2542,  2.2757],
            [ 8.1855,  5.9874, 12.1746,  5.4226,  6.4498],
            [ 8.2790, 11.1909,  4.8897,  1.8343,  8.0180],
            [ 6.6634,  3.8084,  0.8727,  5.8871,  2.1537],
            [ 1.3817,  4.2220,  3.5178,  1.8174, 16.2716],
            [ 6.6634,  3.4661,  4.7625,  0.6470,  2.1537],
            [ 8.2790,  1.5693,  3.7045,  3.5447,  8.0180],
            [ 8.1855, 10.7553, 20.8717,  3.6055,  6.4498]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.3852, -0.2627, -0.0123, -1.0831,  1.1288,  0.9724,  1.0503, -0.2618],
            [ 0.1875,  0.6241,  0.4915, -0.9050, -0.6080,  2.2570,  1.2669,  0.6212],
            [-0.4191, -0.5866,  1.2465, -0.6271, -0.1704,  0.7482,  0.6810,  0.3411],
            [-1.0420,  0.1890,  0.1758,  0.3258, -1.2155, -1.3512, -0.4884, -0.9011],
            [ 1.9523, -0.8548,  0.7952,  0.5219,  0.2700, -1.9040,  0.2523,  0.7130],
            [ 1.2634, -0.8331, -0.4645,  1.5563,  0.7504, -0.9245, -0.0306,  1.7485],
            [ 0.3604, -1.0527, -0.5647,  1.5854,  0.9521,  0.5509,  0.2831,  0.1170],
            [-0.3342,  0.7728,  0.0785,  1.1864, -0.6227,  1.1597, -0.0440,  0.8362]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0430, -0.5743,  1.4299],
            [ 0.5620, -0.3696,  0.1570],
            [-1.5328,  0.4534,  0.5970]], requires_grad=True), Parameter containing:
    tensor([[-2.6458]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4165, -0.1005,  1.0442, -4.9647, -2.8967, -4.6429, -0.2524, -2.0152],
            [-0.0890, -6.7078, -5.6124, -3.1158, -0.9334,  1.4314, -4.8003, -1.6868],
            [-9.0101, -0.3159, -2.0655, -3.4594, -9.3757,  5.4681, -2.9828, -1.2530],
            [-1.8273, -1.5717, -6.2153, -3.1538,  0.6969, -2.8439, -1.6460,  1.8075],
            [-1.6730, -2.8144, -2.6754, -8.2541,  1.4983, -2.3170, -0.1121,  0.9664],
            [-0.8452, -1.3595, -3.7913, -6.6186,  2.9190, -4.9568, -1.9969, -0.0578],
            [-5.2159,  2.0513, -3.0202, -3.1850, -3.8348, -3.1369, -0.1986, -4.3717],
            [-2.0521,  0.6092, -9.8172, -0.9037, -0.9451, -3.3015,  0.9402, -5.5474]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0584,  0.8351, -2.8229,  3.8247, -5.6218,  2.2185, -0.9502,  1.5073,
             -1.1101, -0.5427],
            [-0.7235,  0.7326, -1.7308,  2.6431,  0.6761,  1.4150,  1.5458, -0.0082,
             -1.1099,  1.1883],
            [ 2.6165, -2.5501,  5.6849, -1.2816, -0.8883, -0.4492,  1.7335,  0.8541,
             -0.4554,  1.0997],
            [-1.1902, -1.0616, -1.3070,  0.1087,  0.1740,  0.9566,  2.4056, -1.9993,
              1.1333,  1.4122],
            [-0.1686, -1.4101,  2.4114, -2.3286,  0.0104, -0.8943, -1.9816, -0.7905,
              2.9509,  1.0152],
            [-0.9375, -0.9786,  0.2568,  1.1634, -2.5836,  1.8506,  0.3723,  0.5682,
              2.9449, -1.4216],
            [ 0.0753,  1.6458,  0.5790,  1.6886,  1.2871, -2.5792, -2.3640,  1.1422,
              1.4408,  2.1035],
            [-0.2598, -0.2497,  2.7176, -3.9699, -0.0697,  0.8303,  1.6688,  2.2608,
              1.1410, -3.2137],
            [-0.2415, -0.6404,  0.6241,  1.3458, -0.3181, -2.3881,  0.7506, -2.8355,
              1.6822,  0.5878],
            [-1.2394,  0.5795, -1.2693, -1.0356, -0.2377,  2.3281, -0.5243,  2.5486,
             -0.6088, -1.1274]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.211 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
