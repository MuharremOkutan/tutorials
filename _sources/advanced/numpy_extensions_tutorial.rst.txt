.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.5014,  9.8823,  3.2327,  4.2457,  8.9508],
            [12.4666,  4.3192,  0.2034, 13.8818,  5.4813],
            [ 5.6271,  9.9014,  8.7450, 15.4383,  8.0261],
            [17.1303,  8.1727,  1.8831, 11.4409, 10.9095],
            [ 0.5773,  7.7989,  7.1763, 11.5711,  6.1692],
            [17.1303,  1.6355,  7.8777, 12.0626, 10.9095],
            [ 5.6271,  7.6388,  6.7718,  3.6962,  8.0261],
            [12.4666,  6.8255, 13.7322,  7.3441,  5.4813]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.6237,  1.5924, -0.0906, -0.1630, -0.0745, -0.6650, -0.2924,  0.4667],
            [ 0.2751, -1.0042, -1.4642, -1.8094, -2.3141,  0.1908,  1.0053, -0.7271],
            [-1.4977, -0.2240, -0.5913, -2.5930, -0.1997, -1.9338,  0.7174, -1.0152],
            [ 0.6972, -0.0792, -0.7055,  1.7256,  0.6518, -0.3018,  1.0103,  1.1743],
            [ 0.2111, -0.0725, -0.8363, -0.3068, -0.5487, -1.0984,  0.9109,  0.3857],
            [ 2.0908, -0.5433, -0.2725, -0.4622,  0.6681, -1.0968,  1.1404, -0.5691],
            [ 1.2945,  0.1489,  1.5168, -2.0294,  0.2030,  2.8331, -2.6731,  0.7094],
            [-2.1457, -1.0633, -0.5795, -0.6831,  0.8688, -0.4915, -0.1272, -1.0207]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8107, -0.7716,  1.4689],
            [-0.4850, -0.2334, -0.4743],
            [-0.9457,  0.9442, -2.3608]], requires_grad=True), Parameter containing:
    tensor([[-0.9160]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.4388, -0.5092, -5.1171,  2.0920,  1.4677,  0.0112, -2.0015, -0.2983],
            [-9.4526,  0.7791, -4.8865, -2.0519, -5.5314,  0.6118, -4.8992, -0.0402],
            [ 1.8157,  0.0772,  0.9239, -1.8561, -0.8388, -5.2625, -3.3058, -2.8691],
            [ 3.4092,  2.5591, -0.1449,  2.0453,  1.2736,  0.3170,  3.6837, -8.1005],
            [ 3.4586, -4.2068,  0.3816, -8.1627,  1.7592, -2.6508,  0.9290, -0.4525],
            [ 0.9455, -0.7013, -1.7463,  2.4357, -3.4191,  2.5486, -4.6708,  3.9216],
            [-6.7381,  0.6741, -2.3575, -2.7155, -1.4706,  2.4383, -4.6298,  1.0812],
            [ 0.0282, -4.1660, -0.4642, -5.8138, -1.9014, -7.0671,  0.0441, -0.9888]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0593,  0.3420, -1.8835,  1.1602, -2.1525, -2.5539,  1.4847, -2.6461,
              0.8091,  0.4451],
            [ 0.9914, -1.4953,  2.7189,  1.0475,  0.5773,  0.6670,  2.3422, -1.8543,
             -1.1680, -0.0783],
            [-0.7711, -1.7532,  3.4274, -6.4066,  5.1054,  0.4567, -2.1529,  4.7572,
             -4.1685, -0.7134],
            [ 1.0458,  2.8718,  0.4444,  2.6959,  5.4512, -1.3871, -0.4804,  3.7070,
              3.6803, -0.9264],
            [-1.2890,  1.8601, -7.0900, 10.6013, -5.8015,  8.8006, -1.7199,  2.4424,
              3.7424, -0.3380],
            [-2.6479,  0.1873, -8.4454, -2.8383, -7.4951,  0.8755,  0.7539, -0.2979,
              0.7346,  1.1678],
            [ 1.1220, -2.6189,  4.5558, -5.9813,  3.6885, -4.9730,  0.7059, -2.3353,
              0.7661,  1.8590],
            [ 1.6097, -2.6089,  7.1586, -2.2643,  4.0782,  7.6960, -5.3714,  2.7048,
             -4.9889,  1.5853],
            [-1.0571, -0.8414, -1.2598, -1.4670,  1.8934,  3.0500,  3.9119,  0.8678,
             -0.3603, -1.7985],
            [-1.3415,  0.8340, -4.1218, -0.2339, -0.4817, -2.6727,  5.7395,  0.1399,
              0.8651, -2.1570]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.218 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
