.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.7582,  5.7265,  7.8973,  5.1975,  2.5155],
            [ 2.6653,  3.7516, 10.3070, 10.1931,  4.5731],
            [ 2.7855,  2.6116,  7.1270,  3.2406,  7.3463],
            [ 9.3588,  5.4444,  3.9263, 13.2309,  3.3061],
            [ 1.3777,  6.4485,  5.4014, 10.9823, 11.4792],
            [ 9.3588, 14.3981,  2.3971,  7.1949,  3.3061],
            [ 2.7855,  5.5597, 14.4309,  6.9886,  7.3463],
            [ 2.6653, 10.5824,  8.5847,  4.9150,  4.5731]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.7645,  0.1583,  0.3742, -0.5264, -1.5081, -0.2978,  1.1230, -0.5808],
            [ 0.4938, -1.0624,  0.1607, -0.7059,  0.0356,  0.4026, -0.2258, -0.9567],
            [ 1.0742, -0.0699, -1.4495, -1.6235, -0.0876,  1.0833, -1.2401,  1.7374],
            [ 0.3761,  0.3769, -1.4995,  0.1098, -0.7858, -0.4986, -0.8136, -1.1886],
            [-0.1051, -1.3142,  1.2470, -1.3625,  0.5170,  1.2147, -0.6036,  2.1302],
            [ 2.3701,  0.0908, -0.7250, -0.9978,  0.1546, -1.9122, -0.3950,  0.4977],
            [-0.9204,  0.3627, -0.5868,  0.0847,  0.5060,  0.0507, -1.4115, -1.4011],
            [-0.6025,  0.9554,  0.2399, -0.7094,  0.8932, -0.4922,  0.5380, -0.6922]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3194,  0.0558,  1.4899],
            [ 0.5550, -0.3402,  0.8971],
            [-0.0738,  0.2737, -0.7028]], requires_grad=True), Parameter containing:
    tensor([[-0.3045]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4434,  0.5466,  2.5178,  0.3900, -0.7890,  2.4485, -2.2055,  3.7196],
            [ 1.1576,  0.6887,  0.8961,  0.3645,  0.2253,  1.3420,  1.9073, -3.5793],
            [-1.4492, -0.7028, -1.4106,  1.6194, -1.0030,  2.3000,  0.3365, -1.2270],
            [ 1.4366,  0.7701, -0.4093,  2.7030, -1.9448,  2.6687,  1.7121,  1.5085],
            [-1.4229,  0.0371, -2.5546,  1.0464, -1.3527, -0.7648,  0.4376,  0.8877],
            [-2.7449,  0.1526,  0.8668, -3.0323, -2.3998,  0.9980, -0.8486, -1.3151],
            [-2.7534,  1.3323, -0.0348,  1.2042, -4.4125,  0.5873, -1.4616, -2.7600],
            [-0.1058,  0.5965, -0.1153,  0.6793,  0.7014, -4.3084, -0.6181,  0.6579]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1598,  0.2975,  0.8527,  1.4441,  0.1698,  0.8699, -0.3951,  0.4179,
              1.2171,  0.1476],
            [ 0.1562,  0.2581, -0.1914,  1.3196, -0.0096,  1.9182, -1.1914, -3.1336,
              2.9038, -1.4550],
            [-0.3007,  0.6096, -0.6434,  2.6045, -1.2572,  2.5661,  2.3813, -3.8826,
              2.8814, -0.7487],
            [-0.0609,  0.9793, -0.3531,  3.3742,  0.7701, -1.5726,  1.1935,  2.9725,
              0.3801, -0.5757],
            [ 0.0644,  0.2717,  0.9739, -1.3740,  1.4765,  0.9219, -0.5467,  1.5471,
              4.5262, -0.1575],
            [ 0.0059,  0.1485,  0.2595,  2.4051,  0.6052,  1.6405,  1.9969, -5.7105,
              1.4526,  0.1956],
            [-0.5645,  0.7149, -1.2870,  1.0896,  3.6503, -1.5299,  2.2597, -1.5629,
             -2.0915,  1.9507],
            [-0.8108,  0.7157, -1.6474,  1.2472, -2.0652,  1.8015,  1.0908,  1.6999,
              0.6172, -0.0649],
            [-0.0633, -0.1379, -0.1470,  1.4365, -2.4092,  1.5863, -0.6011, -1.2792,
              2.1613, -2.7774],
            [ 0.0214, -0.1018,  0.3962, -0.7389,  1.4980, -1.1667, -0.0581,  0.5482,
             -1.1704,  1.0880]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.211 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
