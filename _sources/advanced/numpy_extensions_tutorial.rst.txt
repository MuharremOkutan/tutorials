.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.3065,  1.3008, 13.8439,  9.6097,  4.6084],
            [ 7.6154,  5.1945,  7.6978, 12.7139, 10.3232],
            [ 8.0042,  8.1853,  5.8189,  1.8755, 11.1523],
            [ 4.3562, 13.3582, 14.8182,  6.9275, 19.6379],
            [ 1.7388, 10.2407,  3.3749, 12.5675,  2.7806],
            [ 4.3562,  4.1888,  9.6978,  6.2199, 19.6379],
            [ 8.0042,  9.9693, 11.0513, 10.5025, 11.1523],
            [ 7.6154,  8.4605,  5.1626,  5.6956, 10.3232]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.9522, -0.1566, -0.6274, -0.3544,  1.1169, -1.9102,  1.4274, -1.1120],
            [ 0.1463, -0.2421, -2.2371,  0.4600, -1.9472, -0.7459, -2.7941,  2.8721],
            [ 0.9534,  0.2796, -1.1229,  0.9407, -1.2496, -0.8170,  0.7267, -1.7711],
            [ 1.4314,  0.5571,  1.1693, -0.0541, -1.2391,  0.4441, -0.2574, -0.9612],
            [ 0.4238, -2.4166, -2.7181,  1.0498,  2.0119, -0.1351,  0.1360,  0.1328],
            [ 1.1228, -0.7559,  1.0894, -0.4574,  0.8227, -0.9387, -0.8208, -1.2560],
            [ 0.6413,  0.6773, -0.3204,  0.9368,  0.1289,  0.5516, -0.3704,  0.6153],
            [-0.5560, -1.3415, -0.1972,  0.4853,  0.7286, -1.5313,  1.4842,  0.4972]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2778,  0.9875, -2.4973],
            [ 0.4226,  0.5696, -0.1352],
            [ 0.2817, -1.1556, -0.6996]], requires_grad=True), Parameter containing:
    tensor([[-0.8095]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4867, -7.8907, -2.2349,  1.8065,  1.1673,  0.5334,  0.4982,  4.6139],
            [ 2.0206,  1.6052, -5.4525,  3.5610,  1.1716, -8.3619,  0.5558, -0.5081],
            [-4.0299, -6.5400,  1.9113, -1.7026, -3.5309, -0.2383,  1.7482,  3.7983],
            [-0.7714, -8.2266,  1.3245,  2.3584, -0.8330, -0.2063,  1.0882, -5.5755],
            [-0.0470, -1.2652, -1.5873,  0.8955, -0.8931, -2.1861,  3.5849,  1.5446],
            [-3.7922, -5.2450, -0.7533,  2.5043, -4.9009,  0.4584, -2.5991,  0.5953],
            [-0.2321,  2.8074,  4.8873, -2.4422,  5.2536, -1.0688, -1.6661, -1.8934],
            [-1.7636, -2.8500,  0.2060,  1.5649, -3.3918,  5.7148, -6.1159,  1.0249]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3164, -1.1537,  3.1549, -1.0359,  2.3144, -1.9427,  4.9422, -5.7617,
              3.9370, -1.5388],
            [-0.3870, -1.0724,  1.5521, -2.4779,  1.3668,  3.9830, -2.9822,  1.0459,
              2.7188, -1.6135],
            [-0.1116,  0.4887,  2.0730,  3.2919, -0.6563,  4.3792, -4.8848,  3.9130,
             -2.7418, -1.6699],
            [-0.2994, -1.8605,  1.6940, -0.1896,  7.0188, -4.4320, -1.9830,  3.5988,
             -1.8012, -4.6628],
            [-0.7844, -0.1306,  2.7147,  0.2957,  2.1259, -1.8992, -2.4346,  2.1089,
              0.6343, -3.9689],
            [-0.1542,  0.1638,  4.2197,  2.1398,  3.5080, -5.3920, -0.3862,  0.3709,
             -5.8851,  3.4282],
            [-0.2638, -0.9561,  1.0857,  2.7541, -2.1282, -6.3810,  2.2887, -2.2641,
              0.5892, -4.8524],
            [-0.3761, -1.0095,  4.1906,  1.7808,  0.3190,  3.6015,  0.6568, -2.1668,
              4.5837, -1.0709],
            [-0.8215,  0.1981,  1.8978, -1.5109, -3.1444, -0.1096, -0.9336,  0.8796,
             -0.8949, -1.2819],
            [-0.3596,  1.5003,  0.5066,  0.6160,  2.6758,  1.3270, -0.1207,  0.6733,
             -0.7280, -0.6123]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.211 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
