.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.0704,  4.8524,  1.9313,  6.2123, 10.8025],
            [ 7.6520,  3.1898,  2.2751,  8.2560, 11.3633],
            [ 6.9165,  2.3533,  7.7480,  4.2268, 10.8955],
            [ 7.7392, 10.3882,  9.0527,  8.8124, 14.0098],
            [11.5525,  8.5955, 16.1556,  3.1143,  5.0180],
            [ 7.7392,  9.3012,  5.7238, 12.4645, 14.0098],
            [ 6.9165, 10.2680,  4.4158, 10.8679, 10.8955],
            [ 7.6520,  4.2496,  5.8139,  4.6903, 11.3633]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.9606, -3.0423,  1.1613, -0.6771, -0.6382, -1.2523,  0.4238, -2.4166],
            [-0.0831,  0.3672, -0.7808,  0.7960,  2.3288, -0.4033,  1.1228, -0.7559],
            [ 0.9781, -2.0930,  0.0236, -0.1608, -0.6405, -0.1997,  0.6413,  0.6773],
            [ 0.4478,  1.0362,  0.3563, -1.6039, -1.6072,  1.6946, -0.5560, -1.3415],
            [-0.9845, -0.3629,  0.0605,  1.2416,  0.8139,  0.4047, -1.0026,  0.2274],
            [ 0.8963, -0.1628,  0.7062, -1.3146, -0.1394,  0.2553,  0.7986, -0.1002],
            [-2.8868, -1.1230, -0.3460, -0.0454,  0.3277, -0.6612, -0.5927, -0.1274],
            [ 0.2016,  0.6268,  0.1863, -0.5983, -0.5793,  0.2498, -1.7322, -0.0709]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.6292, -0.3114,  0.1703],
            [-0.4020,  0.5441,  0.7253],
            [-0.1885,  0.0904,  1.0343]], requires_grad=True), Parameter containing:
    tensor([[-1.2724]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.5121, -6.5218, -0.6012, -1.3337, -0.7010, -0.0727, -1.5595,  0.7773],
            [-3.2612, -3.9474, -1.2163, -1.4158, -2.1661, -1.3459, -4.8347,  0.0609],
            [-1.4719, -3.0544, -0.8738, -0.1418, -1.7283, -1.0969, -0.9067, -3.5395],
            [ 0.1945, -4.1147, -0.5728,  4.0069, -0.9115,  3.9385, -2.1481, -0.1051],
            [-3.9459,  3.7711, -1.3822, -6.8087,  2.9503,  2.2500, -0.3130, -1.3607],
            [-1.0563, -3.4597,  0.2337, -3.4206,  1.3409, -1.9264, -1.5347,  1.4986],
            [-1.6975, -4.9692, -3.0181,  2.2388, -3.8220, -1.5973, -1.8482,  0.1570],
            [-3.7520,  1.4619, -0.3364, -1.2175,  1.6303, -6.9482,  1.7747, -3.2980]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5388,  0.7785, -1.2201, -0.7661,  0.0315,  0.9314, -0.6661,  0.6503,
             -0.1354,  0.0475],
            [ 2.6026, -2.3678, -0.0211,  1.6744, -0.2954, -1.1243, -1.1853,  0.4131,
             -0.2271,  0.1948],
            [-2.1609,  1.9214,  3.6459, -1.1792, -0.1578,  1.8964, -1.2122, -1.2810,
             -0.9584,  0.0939],
            [-2.3975, -0.4907,  0.9051,  2.0859,  2.8928, -2.0210,  0.1112,  0.4019,
             -2.6247, -0.7234],
            [ 0.0074,  2.4000, -3.1900,  0.6615,  5.7543,  1.8711,  3.4136, -5.8001,
             -0.8594, -1.3791],
            [-2.7323, -0.2042,  0.1909,  1.1019,  0.3558,  2.8008,  3.1543,  2.7445,
             -1.7689, -1.5598],
            [-0.7321, -2.2928, -1.3646,  2.4273,  2.0926, -0.1557,  0.4906,  1.7790,
              3.3381, -1.4777],
            [-1.9640,  0.7818, -5.3804,  1.1280,  3.6559, -0.1708,  2.5294,  1.2423,
              1.5386,  2.1968],
            [ 0.8645, -1.0744, -1.8067, -0.8952, -0.5625,  1.1377,  0.9715,  0.2797,
              1.6168,  1.1569],
            [ 0.3171, -0.2404, -1.5342,  0.3302, -1.1441,  0.5630,  1.2914, -0.1075,
              1.6057,  1.1062]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.217 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
