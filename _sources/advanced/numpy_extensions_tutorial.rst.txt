.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5224,  7.8425,  9.2087,  7.0760,  3.1918],
            [ 3.6424,  7.4769,  4.6448,  3.2230,  4.3817],
            [ 3.0857,  8.6788,  8.8817,  3.4162,  5.9362],
            [ 6.1032,  5.7880,  4.5388,  6.7798, 10.2324],
            [ 5.6261,  3.6645,  6.1506, 11.9332,  8.6750],
            [ 6.1032, 16.4004,  2.1690, 11.7059, 10.2324],
            [ 3.0857,  5.5569,  1.6794,  9.4815,  5.9362],
            [ 3.6424,  9.7997,  7.7287,  3.6294,  4.3817]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.1171,  0.3333, -0.8754,  0.4600,  1.8616,  0.1468, -0.9214, -0.3133],
            [ 0.4260, -0.6062, -1.3617, -1.2063, -0.8551,  0.6169,  0.4919,  0.7700],
            [-0.0367,  2.1633, -0.9262,  1.6294,  0.4378,  0.6633, -0.8150, -0.5896],
            [-1.0661,  0.3822,  1.3556, -0.0802,  1.5938, -0.8809, -0.1871, -1.8243],
            [ 0.8182,  0.8132, -0.6142,  0.6381, -0.3182, -0.3750, -0.3215,  0.2336],
            [-0.6761,  0.9767,  1.2885,  0.7978,  0.7775, -1.1605, -0.4751,  0.9213],
            [ 0.7033, -1.4950, -0.1394,  1.1776, -0.4460,  1.3933,  0.5465, -1.8751],
            [-0.1961,  0.6127, -1.2563, -0.8670,  0.8318, -0.1407, -0.0966, -0.4585]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6025, -0.2575, -1.2094],
            [-0.1523,  0.8107, -0.7716],
            [ 1.4689, -0.4850, -0.2334]], requires_grad=True), Parameter containing:
    tensor([[-0.4743]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.9665, -0.1529, -1.5049,  2.4291,  1.2589, -2.2181, -4.2969,  0.3668],
            [-3.1493,  0.7970, -0.6599,  0.4950, -2.5137, -2.5170,  1.0411, -4.5822],
            [-2.1309, -2.6861,  1.8347, -1.2168,  2.3567, -2.0528, -3.8361,  0.6075],
            [-2.7888,  0.3893,  2.2225, -2.1813,  0.0237,  2.7891, -0.0801, -1.0119],
            [ 1.8756,  3.7504, -6.3199,  2.2443, -1.1908,  0.4086,  2.5180, -3.1675],
            [-0.8288, -1.7141,  3.7188, -6.2459,  3.0855,  0.1782,  0.4779,  1.4746],
            [ 2.1947,  5.4022, -2.7435, -3.4429, -4.5883,  4.3010, -2.7035,  3.8233],
            [-1.1904, -0.5163,  0.7182, -3.1009,  1.5339,  1.5626, -0.2240, -1.2969]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0044,  0.5031,  2.1267, -0.6726, -0.1319,  1.4266, -0.3454,  0.1289,
              0.0459, -1.9787],
            [ 0.2389, -1.1948,  1.0544, -0.5150,  0.0834,  1.1873,  1.0744, -0.8065,
              0.3658, -1.8483],
            [-1.9964,  1.8929, -0.0993, -3.6342, -0.6123,  0.3008, -0.9384,  4.3705,
             -3.2212, -0.9198],
            [-0.2804,  0.7571, -0.2356, -2.1573,  2.8208, -0.3574, -1.4412,  4.0060,
             -0.2778, -0.4223],
            [ 0.9715,  2.8890,  0.3642, -0.7337, -0.0590, -2.6043,  2.4114, -0.5303,
             -0.1569, -1.8529],
            [ 0.1742, -0.7101, -1.7973, -0.4376,  2.8094, -0.7032, -3.1419,  0.2128,
              2.0949, -2.2363],
            [-0.9566,  2.1954,  0.0692,  0.6655,  0.8932,  3.2655, -0.0999, -1.3514,
              0.0808,  0.4566],
            [ 0.4818, -0.9252,  0.6812, -2.2659,  2.8068,  6.3370, -3.3136, -0.0833,
             -2.2665,  0.1752],
            [-0.9405, -0.8435,  0.3032, -2.9195,  2.5220,  0.8223,  2.6148, -3.8136,
              0.6006, -0.0708],
            [-1.8047,  1.1050, -1.7441, -1.3146,  0.7872,  3.4494, -0.6703,  0.0771,
             -0.2800, -0.1087]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.211 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
