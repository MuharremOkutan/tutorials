.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.6151,  4.8731,  6.8061,  6.1848,  5.9356],
            [13.0260, 10.2951, 10.9176, 12.8422,  5.8730],
            [ 6.1716,  3.7314,  4.4101,  4.2100,  7.7428],
            [ 8.6220,  5.9638,  7.4675,  5.8708,  9.6396],
            [ 4.6242,  6.8205,  7.9593,  4.9971, 19.8311],
            [ 8.6220, 10.1462,  5.1593,  5.5764,  9.6396],
            [ 6.1716,  6.0921,  3.7018,  2.7384,  7.7428],
            [13.0260, 10.6789,  8.3419,  6.3037,  5.8730]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.6809, -0.1277,  1.0275,  1.5154,  0.8045,  0.8089,  0.3534,  1.4007],
            [-1.2426,  1.0396,  0.6621, -0.8139,  0.6787,  0.3588,  0.3675, -1.7073],
            [-1.9714,  2.0783, -2.0791,  0.0990, -0.4248, -0.7441, -2.0122,  0.1470],
            [ 0.0923,  0.0567,  1.3327,  0.3039,  0.8671, -0.3944,  0.4577, -1.6211],
            [-1.0898, -0.7865, -0.1553,  0.5671,  0.1428,  0.6646,  0.4671, -0.6011],
            [ 1.3906,  0.0432, -0.2332,  0.7867, -0.6540, -0.8003,  2.2987,  1.0114],
            [ 0.5404, -1.1295, -0.1364,  1.6931, -0.4262,  1.0199,  0.4465,  1.0842],
            [ 0.5254,  0.4805, -0.0485, -0.0034, -0.9254,  0.4623,  1.4648,  0.8831]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2073, -0.3198, -1.2157],
            [ 0.5954,  0.8964, -1.8970],
            [-0.1158, -0.7228,  1.1757]], requires_grad=True), Parameter containing:
    tensor([[0.2257]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.5754,  1.0090,  0.6489, -4.3241, -2.6631, -2.3373,  2.0464, -0.6094],
            [-1.2389, -0.6405, -0.0439,  2.7453, -0.2013, -0.9577,  1.7324, -4.1878],
            [ 2.0946, -3.3551,  1.4107, -5.5358, -4.7557, -4.9698, -0.3911, -0.1707],
            [-0.8020,  1.2546, -0.6957,  1.9174,  2.7274, -8.3603, -9.9771, -0.1170],
            [-8.9657,  0.9407, -0.5136,  4.4627, -0.5598,  4.1574,  9.5256, -5.6710],
            [ 0.9080, -1.6998,  1.2360,  0.5567,  1.8571,  7.6682,  8.5300,  2.4135],
            [-7.2027,  4.2189,  2.3564, -0.1899,  0.3811, -1.2335,  1.0835,  2.9152],
            [ 1.2711,  3.5641, -0.3173,  1.4162, -0.5384,  2.6015, -0.7885, -1.2481]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4311, -1.5035, -1.9212, -1.5497, -0.4264,  0.3243,  0.4200,  0.1391,
             -0.5263,  0.9861],
            [-0.5526, -0.4634,  1.3963, -2.3251, -5.4763,  0.7081,  3.5152,  0.6098,
             -0.8056,  2.3456],
            [-0.0144,  0.7046, -1.2431, -1.3323,  1.2090,  1.1457, -2.9131,  2.7857,
              2.3429,  1.7864],
            [ 2.2195, -1.9470,  3.7495,  0.0570,  5.6427, -3.5306,  0.0221,  0.9263,
             -2.5699,  2.3740],
            [-1.7349,  0.8395,  4.4008, -3.1504,  5.1767,  4.5771,  4.7279, -7.0222,
             -1.9963, -2.9099],
            [ 1.5533,  1.3123, -4.7465,  4.5023, -2.2887, -1.6020,  0.5729,  1.7770,
              2.6901, -4.0641],
            [-1.7931, -0.8246,  0.9737, -1.8115, -2.4872, -4.3913, -0.4233, -4.7056,
             -3.5781,  2.7567],
            [-0.6831,  2.5203, -3.7093,  1.6388, -2.2070, -3.6000, -8.1649,  1.6092,
             -1.1471, -5.3864],
            [ 0.5658, -0.4590, -1.9175,  2.3839,  2.2214, -1.5332, -0.4914,  2.5774,
             -2.8432, -1.0135],
            [-0.1329, -0.6709,  2.3363, -1.8631, -1.6312,  1.4149,  1.8363, -2.0481,
              1.1821,  1.6348]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.217 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
