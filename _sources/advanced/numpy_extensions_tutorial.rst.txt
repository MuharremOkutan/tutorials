.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.3294,  4.5126, 10.7658, 10.5359,  1.0096],
            [ 2.5750,  4.5813,  5.0476,  4.0841, 14.5139],
            [ 6.2495,  5.4512,  9.3563,  7.6404,  3.4288],
            [ 6.5132,  8.1178,  1.8566,  7.5676,  5.4224],
            [ 3.4565, 15.2566,  3.8712,  4.9365, 10.2400],
            [ 6.5132,  2.1624,  5.3758,  6.6098,  5.4224],
            [ 6.2495,  2.8190,  5.9601,  6.1312,  3.4288],
            [ 2.5750, 11.0163,  4.4585,  4.1862, 14.5139]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.6936, -0.2231, -0.2463, -0.0951, -0.3826,  0.5319,  0.7329,  0.0051],
            [-0.7431, -0.5275,  1.5535, -1.9401,  0.7960, -0.5411,  0.8150, -0.5354],
            [-0.5054, -0.4305, -0.2992,  0.4741,  1.2635, -0.5862,  1.8967,  0.7057],
            [-0.2326,  0.5850, -0.5410, -1.0345, -1.1011, -1.7058,  0.6848, -0.1481],
            [-1.1433, -0.2059, -0.3940, -1.2473, -0.6066,  0.4727,  0.6412,  0.3415],
            [ 0.4160,  1.5446,  0.6132,  1.0626, -0.6611, -1.5185, -1.1981,  0.0306],
            [-0.5045, -0.3465, -1.1388,  0.1050, -0.7465,  0.1312, -1.1540,  1.7116],
            [-0.8346,  0.8078, -0.3395,  0.4784, -1.2011, -1.0321,  1.0847, -1.0299]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0308, -1.7373,  0.2860],
            [-0.6117, -0.1648, -0.7303],
            [-0.6334,  1.4026, -0.2098]], requires_grad=True), Parameter containing:
    tensor([[-0.2319]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.4227, -2.1769,  1.7582,  1.7193, -0.9962,  0.2503, -2.3620,  0.0990],
            [-2.3195,  3.8232,  3.8027, -3.7124, -1.6270,  0.9804, -3.3281, -1.8526],
            [ 0.3918,  2.5329, -0.1850, -0.4570,  0.3092, -3.6909, -2.3099, -0.0690],
            [ 0.9108,  2.8772, -6.5263, -0.8724,  0.5530, -3.6313, -1.6652,  2.6830],
            [-6.1187,  0.3703, -0.4936, -2.3896, -2.4663,  2.5647, -0.1101,  3.7908],
            [-0.1151, -2.8339,  2.7919,  1.4027, -4.5416,  2.1513,  2.4697, -4.2344],
            [ 3.9017,  3.5392, -1.3521, -0.9822,  1.0331, -2.9069,  0.3716, -4.0623],
            [-2.4682,  0.9392, -5.2560, -4.8494,  2.7024,  1.0366,  0.5565,  2.8109]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0021,  0.1589, -2.1501,  0.6473,  1.5475,  1.6913, -1.3446,  2.9765,
              0.9728, -0.2371],
            [ 0.0085,  1.2029, -0.7370, -4.4638,  4.3217, -0.6547,  1.7074,  2.5578,
             -0.9609,  0.9248],
            [ 0.7105, -0.0680,  0.7740, -1.4362, -1.1634, -3.1569,  2.5298, -2.6526,
             -0.8277, -0.5140],
            [ 1.0077, -3.3812, -3.4546,  3.8610, -4.9075,  2.5362, -2.1862, -3.5309,
              1.0371, -0.4390],
            [-0.2854, -2.9949, -1.2238, -1.2533, -1.7669,  2.1374, -0.1518, -0.9152,
              0.1404, -0.4082],
            [-1.0546,  0.6849,  0.4716,  0.3529,  0.0487, -1.9319, -0.8250, -0.4996,
             -0.1825,  0.0822],
            [-0.3027, -1.5330, -2.5204,  2.0072,  1.3469, -1.9365, -0.4645, -2.7680,
             -1.5170, -0.2097],
            [-0.8821,  0.3988, -2.1053, -3.7803,  0.1860, -5.0724,  5.4346, -3.4168,
             -0.3033, -0.4518],
            [-0.4136,  1.2465,  1.3521, -1.2020, -3.5246,  0.4755, -2.9927,  1.4947,
             -0.4571, -0.4530],
            [ 0.5996, -1.5878, -0.2480,  1.8333, -1.2660,  4.9042, -4.3659,  2.3205,
              0.2890, -0.0919]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.216 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
