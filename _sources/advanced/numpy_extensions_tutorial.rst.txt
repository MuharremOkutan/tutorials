.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.2436,  2.9063,  4.9024,  6.3903, 10.7653],
            [12.6818,  5.4702,  4.9307,  2.3387,  8.3764],
            [15.6677,  4.8235, 10.1612,  4.1031, 12.8000],
            [ 7.4208, 13.3379,  4.1306, 12.5393, 10.6477],
            [ 4.0283,  1.3783,  3.7085,  2.2350, 11.6588],
            [ 7.4208,  4.4564,  4.8496,  5.4187, 10.6477],
            [15.6677,  9.1883,  2.8245,  2.3709, 12.8000],
            [12.6818,  9.6987, 12.0978,  2.7684,  8.3764]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.2493,  0.5173,  1.7445,  1.1264, -0.3124, -2.2643,  0.3982, -0.7316],
            [-0.8320, -0.6899, -0.1028, -0.1964, -0.1414,  0.2601, -0.1499, -1.7764],
            [-1.0331, -1.1645, -1.0554,  0.7665,  0.0270,  0.1270, -0.8713,  0.3049],
            [ 0.2269,  1.5991, -1.5401,  2.1306, -1.1391,  0.1730, -0.3702,  2.1643],
            [ 2.1356, -0.6373,  0.6999,  0.7538,  0.7916,  1.0496,  1.1610,  0.1516],
            [ 0.1557,  1.3851, -0.3158,  0.3155,  0.1708, -0.1951, -1.2313,  0.2980],
            [ 0.5641,  1.1329, -1.5342, -0.0593,  0.2228,  0.0172,  0.5883,  0.7402],
            [ 0.6909,  0.2211,  1.3525,  1.4707,  0.3556,  1.7839,  1.3321,  0.7305]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1080,  2.1204, -0.1440],
            [ 0.1306,  0.1947, -0.7701],
            [ 0.5974, -2.4244, -0.5228]], requires_grad=True), Parameter containing:
    tensor([[0.1982]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5020,  1.0452,  5.9384, -3.1839,  1.8131, -0.5804, -5.6770,  1.6874],
            [ 6.6945,  3.6277,  4.4396, -1.2047,  5.5690,  3.4378,  0.2606,  0.4878],
            [ 4.1801, -1.7961,  3.2753,  0.4591,  1.4600, -1.2874,  1.1606,  3.5295],
            [-5.4791, -2.2375, -1.7816,  1.2914, -4.1187,  3.6655,  0.2275, -1.6779],
            [-2.8173,  5.6283,  0.8416, -2.7791,  2.7282,  0.6016, -1.9295,  0.1569],
            [ 3.4369,  4.4682,  3.0586,  0.8791,  4.5585, -3.8730, -6.0233,  1.7002],
            [ 0.5892,  0.1870, -4.2873, -1.3816, -5.5677, -0.3004,  1.4742, -1.6258],
            [-2.1572, -0.3809, -3.7742,  2.0620,  4.0631, -4.1321,  0.4488, -1.2366]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0431,  0.8854,  0.9133,  4.0161,  1.3099, -0.5413,  1.0265, -1.6800,
              0.0511,  0.0039],
            [ 0.0886,  1.0381,  3.8677,  0.6968,  0.1539,  1.5615,  2.6336, -1.8057,
             -0.8548,  0.1229],
            [ 0.2990, -0.1527, -0.4532, -6.2337, -2.0082,  0.3695, -1.2993,  1.2647,
              2.1612,  0.4555],
            [ 0.2236,  0.1962, -6.8154, -1.4250, -1.5974, -2.0446, -5.0179, -3.0419,
              0.8619, -0.1073],
            [ 0.1249, -0.1716, -2.4894,  0.8767, -0.1529, -1.3534, -1.7574, -6.0043,
             -2.4857,  0.1663],
            [ 0.0163, -1.3029,  3.3889, -5.2312, -2.8092,  2.5847, -0.1069,  0.8156,
              7.9219,  0.6961],
            [ 0.1160, -1.6866,  2.7258,  0.7268,  2.3129,  5.3668, -1.0259,  6.8073,
              0.3257, -0.6857],
            [-0.1986,  1.3512, -3.1433,  1.9229, 10.8563, -2.6335, -2.9242,  7.9470,
             -9.3719,  0.8625],
            [-0.0942,  0.5479, -0.5085, -0.2654,  1.0982, -3.2309, -0.9493, -2.2055,
              2.5055,  2.5966],
            [ 0.0219,  0.0895, -1.7547,  4.6286, -1.8710, -1.0179,  3.0307, -6.0601,
              3.7296,  1.0478]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.216 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
