.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.9936,  5.5579,  6.0402,  7.8269,  9.9749],
            [ 7.6226,  9.6358, 10.5483,  2.7299,  5.6968],
            [10.0296, 11.2476,  3.1762,  4.6368,  5.1739],
            [ 2.3919,  5.6653,  4.7124,  5.1430,  2.5340],
            [ 5.3364, 11.2642,  2.8716,  4.1219,  2.5332],
            [ 2.3919,  5.8828,  4.1598, 11.4032,  2.5340],
            [10.0296,  5.7384,  5.0072,  4.5179,  5.1739],
            [ 7.6226,  9.3786,  0.5290, 11.8385,  5.6968]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.6741, -0.1915, -0.9260, -0.7793, -2.4342, -1.4679,  0.3634,  1.0280],
            [ 0.6652, -0.8134,  0.8346, -0.7620, -0.4388,  0.3287,  0.4751,  0.7365],
            [ 0.9376,  0.4503,  2.0976,  0.4301, -0.3702, -0.7911,  0.2732, -0.5831],
            [ 0.2959,  0.3241, -0.5003, -0.2408,  0.1439, -0.3853,  1.5604, -0.3573],
            [ 0.1445,  0.1967, -0.0210, -0.8008,  1.2752, -1.0260, -0.4753,  1.0306],
            [-0.2573, -0.0798,  0.9910,  0.5827,  1.7076,  1.8248,  0.1979, -0.1043],
            [ 0.2069,  0.3389,  1.1768,  0.2016,  1.5187, -0.7093, -0.1500,  0.7100],
            [-0.2846, -0.6508,  0.8092,  0.2040,  0.8793, -0.3462, -1.3862,  1.7110]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4339, -1.2898, -0.1178],
            [ 0.0959, -1.0535, -0.6960],
            [ 1.2876, -0.5397, -1.4584]], requires_grad=True), Parameter containing:
    tensor([[0.4159]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.5467,  1.7886, -1.3708, -1.0608,  2.3442, -3.1512, -4.8430, -0.0976],
            [-3.3194,  2.3194,  1.2031, -3.0073,  1.9335,  3.8210, -5.7980, -7.1669],
            [-0.0308,  0.3294, -2.7858, -2.7245,  1.2033, -0.5415, -1.7409, -2.3900],
            [ 1.8582, -1.3964,  0.9620,  0.7894, -2.6346, -3.4816,  1.0256, -2.1342],
            [ 2.6985,  1.7328,  3.7788,  1.6085, -3.9984, -1.5600,  1.3959, -6.0040],
            [-1.0995,  0.6632,  0.8920, -0.2459, -2.2505, -5.8072,  1.8144,  1.4422],
            [-2.3032,  3.0080,  2.4025,  2.3435,  1.0466, -3.4127, -1.9845,  2.3797],
            [ 1.7681,  3.2062,  1.7165,  2.4566,  2.0894, -0.1972, -1.1148,  2.8569]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5303, -2.2026, -1.1163,  0.6892, -1.3168, -0.8188, -0.1526, -1.5641,
             -0.9973, -0.0864],
            [-2.6812, -2.5758,  0.0165, -0.0750, -2.3054, -2.7925,  1.0517, -0.6603,
             -2.5353, -0.6523],
            [ 1.1790, -1.4093, -3.5282, -2.6365,  1.3934,  0.1543,  3.9962,  6.5121,
             -1.0077, -1.8716],
            [ 0.2900, -4.2220, -8.6435, -0.5346,  0.2686, -4.2488,  0.6207,  7.1149,
              1.8677, -1.6360],
            [-0.9534, -0.5312, -3.0586, -1.3715, -3.0502, -5.3831, -2.6096,  5.8220,
              5.3281, -0.0046],
            [ 3.3722,  1.5881, -0.3327, -0.5793,  0.2850,  0.1442, -3.9887,  0.9800,
              3.1704, -0.5587],
            [ 3.8459,  5.4123,  2.1980, -1.0471,  1.1829, -2.0088, -3.8811, -3.4859,
             -0.7278,  1.3579],
            [-2.9951,  2.8751,  5.9094, -0.5447, -0.6385, -0.0261, -0.2187, -0.0597,
             -0.8232,  0.0392],
            [-2.9348, -1.4637,  4.7557,  3.2688, -0.4235,  0.7889, -0.7697, -1.3886,
             -0.2941, -0.4922],
            [ 1.3324, -1.8114, -1.6512,  2.1507,  1.4392, -0.6387, -2.3815, -0.5103,
              1.7914,  0.8849]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.208 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
