.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.7387,  4.1322,  7.5610,  2.9154,  4.5752],
            [ 6.0329,  8.5573,  6.7138,  5.3283,  9.4929],
            [ 5.1108,  2.5338,  5.0140,  9.3694,  6.1053],
            [11.1280,  2.9674, 11.1853,  6.4285,  5.7258],
            [ 0.1448,  9.1517, 15.3606,  7.4097,  0.3235],
            [11.1280, 10.3104, 13.6455,  7.9464,  5.7258],
            [ 5.1108, 13.3189,  8.7072, 14.7118,  6.1053],
            [ 6.0329, 12.4140,  1.6938,  6.1594,  9.4929]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.8646, -0.9640,  0.3684,  0.4785,  0.2176,  3.6303,  1.4920, -0.2265],
            [ 1.0435,  0.8261, -0.3384, -0.1680, -0.0046, -2.1746,  1.2707,  0.0012],
            [ 1.3086,  0.7425, -0.1712, -1.1458,  1.7055,  0.0889, -0.2048, -0.7138],
            [-0.6256, -0.6387,  1.5702,  0.1852, -2.9406, -0.1744,  1.0963,  1.7572],
            [-0.2709, -0.2045, -0.3570, -1.7862, -0.0663,  0.9170, -1.2091,  0.9613],
            [ 0.8027,  1.5015, -0.2852,  0.5796, -0.2638, -0.0567,  0.4246,  0.4676],
            [-1.0404,  1.0613,  0.4938, -1.4069, -0.3410,  0.1171,  0.3333, -0.8754],
            [-0.4534, -1.0305,  1.0871,  0.7682,  1.2566,  0.4260, -0.6062, -1.3617]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.from_numpy(result)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4917,  0.9028,  0.1211],
            [-0.8200, -0.8978,  1.5676],
            [-0.3743, -0.3291, -1.4000]], requires_grad=True), Parameter containing:
    tensor([[0.0516]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7730, -1.9177,  1.9681,  4.7482, -1.5970,  0.0946, -3.2939,  1.0556],
            [ 4.6155, -1.1339, -4.8638, -0.2999,  3.6391,  1.6206,  1.3884, -4.4815],
            [ 0.3748,  4.1257, -0.3689, -3.4180, -0.9521,  4.7278,  1.9387,  1.0824],
            [-1.6216,  3.2150, -3.8773,  4.9282, -2.6951, -1.0919, -0.2511, -0.7237],
            [-4.3178, -0.3143,  2.4604, -2.1239,  1.9585,  0.8792,  3.0135, -4.0801],
            [-1.2915, -0.9845, -3.1543,  4.6083, -6.0965,  3.2299,  5.6153,  3.5388],
            [-2.6784, -4.6717,  1.8592, -2.2515, -1.9110, -1.8955, -1.5432, -1.9051],
            [-2.3067,  0.0500, -3.8626,  2.8558,  4.0523,  0.5512, -1.2190,  1.8157]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5146,  1.1017, -3.5956,  0.2100,  2.2300, -1.4101,  1.8490,  0.4477,
             -0.8305, -0.0966],
            [-0.9103, -3.3165,  2.6796, -5.1498,  4.2855,  1.0147,  1.0235, -0.6121,
              0.4169, -1.0821],
            [-2.4041, -4.5707, -2.7239,  6.2460, -2.6446,  1.3914,  1.1855, -1.1700,
             -1.8512,  3.2844],
            [-1.4245, -4.4368, -0.3057, -1.3723,  2.8995,  1.6338,  2.8565, -3.1944,
             -0.5712, -2.2162],
            [-0.6063, -0.6634, -1.9702, -1.6216, -3.9588, -0.0903,  2.7328,  4.7596,
              0.6856,  0.9174],
            [ 2.7611, -0.4231,  2.7723, -1.6345,  0.2188,  0.5466, -0.7275, -3.3342,
              3.6298, -0.6566],
            [ 2.4276,  0.2097,  0.6545,  1.9884, -2.5347,  1.6877, -1.1637,  0.6804,
             -3.1557,  1.4731],
            [ 1.0302,  0.1534,  0.3762,  4.3186,  3.2964, -0.3929,  0.1674, -3.2469,
              0.0964, -0.8342],
            [ 0.1325, -0.5438, -0.3792, -2.1224,  2.5658,  2.2716, -1.0223,  2.2594,
              0.5679, -0.9884],
            [-0.0404, -0.1338, -0.6369, -0.8208, -1.2961, -0.1193,  0.9782,  0.0996,
             -0.2544,  0.5882]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.212 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
